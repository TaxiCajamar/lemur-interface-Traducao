// ===== TRADUTOR OTIMIZADO E SINCRONIZADO - NOTIFICADOR =====

// ===== FUN√á√ÉO DE TRADU√á√ÉO ATUALIZADA =====
async function translateText(text) {
    try {
     const response = await fetch('https://chat-tradutor-bvvx.onrender.com/translate'late', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                text: text,
                targetLang: window.meuIdiomaRemoto || 'en' // ‚úÖ USA IDIOMA GUARDADO
            })
        });

        const result = await response.json();
        const translatedText = result.translatedText || text;
        return translatedText;
        
    } catch (error) {
        console.error('‚ùå Erro na tradu√ß√£o:', error);
        return text;
    }
}

// ===== INICIALIZA√á√ÉO DO TRADUTOR SINCRONIZADA =====
function initializeTranslator() {
    console.log('üéØ Iniciando tradutor notificador...');

    // ===== VERIFICA√á√ÉO DE DEPEND√äNCIAS CR√çTICAS =====
    console.log('üîç Verificando depend√™ncias do notificador-ui.js...');
    
    // ‚úÖ VERIFICA SE NOTIFICADOR-UI.JS J√Å CONFIGUROU TUDO
    if (!window.meuIdiomaLocal || !window.meuIdiomaRemoto) {
        console.log('‚è≥ Aguardando notificador-ui.js configurar idiomas...', {
            meuIdiomaLocal: window.meuIdiomaLocal,
            meuIdiomaRemoto: window.meuIdiomaRemoto
        });
        setTimeout(initializeTranslator, 500);
        return;
    }
    
    // ‚úÖ VERIFICA SE WEBRTC EST√Å PRONTO
    if (!window.rtcCore) {
        console.log('‚è≥ Aguardando WebRTC inicializar...');
        setTimeout(initializeTranslator, 500);
        return;
    }

    // üéØ CONFIGURA√á√ÉO DE IDIOMAS SINCRONIZADA
    const IDIOMA_ORIGEM = window.meuIdiomaLocal || 'pt-BR';
    const IDIOMA_DESTINO = window.meuIdiomaRemoto || 'en';
    const IDIOMA_FALA = window.meuIdiomaRemoto || 'en-US';
    
    console.log('üî§ Idiomas sincronizados:', { 
        origem: IDIOMA_ORIGEM, 
        destino: IDIOMA_DESTINO,
        fala: IDIOMA_FALA 
    });

    // üé§ ELEMENTOS VISUAIS
    const recordButton = document.getElementById('recordButton');
    const recordingModal = document.getElementById('recordingModal');
    const recordingTimer = document.getElementById('recordingTimer');
    const sendButton = document.getElementById('sendButton');
    const speakerButton = document.getElementById('speakerButton');
    const textoRecebido = document.getElementById('texto-recebido');
    
    if (!recordButton || !textoRecebido) {
        console.log('‚è≥ Aguardando elementos do tradutor...');
        setTimeout(initializeTranslator, 300);
        return;
    }

    // üéôÔ∏è CONFIGURA√á√ÉO DE VOZ
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const SpeechSynthesis = window.speechSynthesis;
    
    if (!SpeechRecognition) {
        console.log('‚ùå SpeechRecognition n√£o suportado');
        recordButton.style.display = 'none';
        return;
    }
    
    if (!SpeechSynthesis && speakerButton) {
        console.log('‚ùå SpeechSynthesis n√£o suportado');
        speakerButton.style.display = 'none';
    }
    
    const recognition = new SpeechRecognition();
    recognition.lang = IDIOMA_ORIGEM; // ‚úÖ IDIOMA LOCAL GUARDADO
    recognition.continuous = false;
    recognition.interimResults = true;

    // ‚è±Ô∏è VARI√ÅVEIS DE ESTADO (COMPLETAS)
    let isRecording = false;
    let isTranslating = false;
    let recordingStartTime = 0;
    let timerInterval = null;
    let pressTimer;
    let tapMode = false;
    let isSpeechPlaying = false;
    let lastTranslationTime = 0;

    // ‚è±Ô∏è SISTEMA DE TIMER
    function updateTimer() {
        const elapsedSeconds = Math.floor((Date.now() - recordingStartTime) / 1000);
        const minutes = Math.floor(elapsedSeconds / 60);
        const seconds = elapsedSeconds % 60;
        if (recordingTimer) {
            recordingTimer.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }
        
        if (elapsedSeconds >= 30) {
            console.log('‚è∞ Tempo m√°ximo de grava√ß√£o atingido (30s)');
            stopRecording();
        }
    }

    // üéôÔ∏è CONTROLES DE GRAVA√á√ÉO (COM TODOS OS VISUAIS)
    function showRecordingModal() {
        if (recordingModal) recordingModal.classList.add('visible');
        recordingStartTime = Date.now();
        updateTimer();
        timerInterval = setInterval(updateTimer, 1000);
        console.log('üì± Modal de grava√ß√£o vis√≠vel');
    }

    function hideRecordingModal() {
        if (recordingModal) recordingModal.classList.remove('visible');
        clearInterval(timerInterval);
        console.log('üì± Modal de grava√ß√£o escondido');
    }

    function startRecording() {
        if (isRecording || isTranslating) {
            console.log('‚ö†Ô∏è J√° est√° gravando ou traduzindo');
            return;
        }
        
        try {
            recognition.start();
            isRecording = true;
            
            // ‚úÖ VISUAL: Bot√£o fica verde
            recordButton.classList.add('recording');
            showRecordingModal();
            
            // ‚úÖ VISUAL: Desabilita bot√£o speaker durante grava√ß√£o
            if (speakerButton) {
                speakerButton.disabled = true;
            }
            
            console.log('üéôÔ∏è Grava√ß√£o iniciada');
        } catch (error) {
            console.error('‚ùå Erro ao iniciar grava√ß√£o:', error);
            stopRecording();
        }
    }

    function stopRecording() {
        if (!isRecording) {
            console.log('‚ö†Ô∏è N√£o estava gravando');
            return;
        }
        
        isRecording = false;
        recognition.stop();
        
        // ‚úÖ VISUAL: Bot√£o volta ao normal
        recordButton.classList.remove('recording');
        hideRecordingModal();
        
        // ‚úÖ VISUAL: Reativa bot√£o speaker ap√≥s grava√ß√£o
        if (speakerButton) {
            speakerButton.disabled = false;
        }
        
        console.log('‚èπÔ∏è Parando grava√ß√£o');
    }

    // üîä SISTEMA DE VOZ
    function speakText(text) {
        if (!SpeechSynthesis || !text) {
            console.log('‚ùå SpeechSynthesis n√£o dispon√≠vel ou texto vazio');
            return;
        }
        
        window.speechSynthesis.cancel();
        const utterance = new SpeechSynthesisUtterance(text);
        
        // ‚úÖ USA O IDIOMA REMOTO CORRETO (GUARDADO)
        utterance.lang = window.meuIdiomaRemoto || 'en-US';
        utterance.rate = 0.9;
        utterance.volume = 0.8;
        
        utterance.onstart = function() {
            isSpeechPlaying = true;
            if (speakerButton) speakerButton.textContent = '‚èπ';
            console.log('üîä Iniciando fala do texto');
        };
        
        utterance.onend = function() {
            isSpeechPlaying = false;
            if (speakerButton) speakerButton.textContent = 'üîä';
            console.log('üîä Fala terminada');
        };
        
        utterance.onerror = function(event) {
            isSpeechPlaying = false;
            if (speakerButton) speakerButton.textContent = 'üîä';
            console.error('‚ùå Erro na fala:', event.error);
        };
        
        window.speechSynthesis.speak(utterance);
    }

    function toggleSpeech() {
        if (!SpeechSynthesis) {
            console.log('‚ùå SpeechSynthesis n√£o suportado');
            return;
        }
        
        if (isSpeechPlaying) {
            window.speechSynthesis.cancel();
            isSpeechPlaying = false;
            if (speakerButton) speakerButton.textContent = 'üîä';
            console.log('‚èπ Fala cancelada');
        } else {
            if (textoRecebido && textoRecebido.textContent) {
                const textToSpeak = textoRecebido.textContent.trim();
                if (textToSpeak !== "") {
                    console.log(`üîä Falando texto: "${textToSpeak.substring(0, 50)}..."`);
                    speakText(textToSpeak);
                } else {
                    console.log('‚ö†Ô∏è Nenhum texto para falar');
                }
            } else {
                console.log('‚ö†Ô∏è Elemento texto-recebido n√£o encontrado');
            }
        }
    }

    // üéôÔ∏è EVENTOS DE RECONHECIMENTO (COM TRADU√á√ÉO CORRETA)
    recognition.onresult = function(event) {
        let finalTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
            if (event.results[i].isFinal) {
                finalTranscript += event.results[i][0].transcript;
            }
        }
        
        // ‚úÖ PROCESSO DE TRADU√á√ÉO CORRETO E SINCRONIZADO
        if (finalTranscript && !isTranslating) {
            const now = Date.now();
            if (now - lastTranslationTime > 1000) {
                lastTranslationTime = now;
                isTranslating = true;
                
                console.log(`üé§ Reconhecido: "${finalTranscript}"`);
                
                translateText(finalTranscript).then(translation => {
                    if (translation && translation.trim() !== "") {
                        console.log(`üåê Traduzido: "${finalTranscript}" ‚Üí "${translation}"`);
                        
                        // ‚úÖ ENVIA VIA FUN√á√ÉO GLOBAL DO NOTIFICADOR-UI.JS
                        if (window.enviarMensagemTraduzida) {
                            window.enviarMensagemTraduzida(translation);
                        } else {
                            console.log('‚ùå Fun√ß√£o enviarMensagemTraduzida n√£o encontrada');
                        }
                    } else {
                        console.log('‚ùå Tradu√ß√£o vazia ou falhou');
                    }
                    isTranslating = false;
                }).catch(error => {
                    console.error('Erro na tradu√ß√£o:', error);
                    isTranslating = false;
                });
            }
        }
    };
    
    recognition.onerror = function(event) {
        console.log('‚ùå Erro recognition:', event.error);
        stopRecording();
    };
    
    recognition.onend = function() {
        if (isRecording) {
            console.log('üîö Reconhecimento terminado automaticamente');
            stopRecording();
        }
    };

    // üéÆ EVENTOS DE BOT√ÉO (COM TODOS OS VISUAIS ORIGINAIS)
    if (recordButton) {
        recordButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            if (recordButton.disabled || isTranslating) {
                console.log('‚ö†Ô∏è Bot√£o desabilitado ou traduzindo');
                return;
            }
            
            if (!isRecording) {
                pressTimer = setTimeout(() => {
                    tapMode = false;
                    console.log('üëÜ Touch longo - iniciando grava√ß√£o');
                    startRecording();
                    showRecordingModal();
                }, 300);
            }
        });
        
        recordButton.addEventListener('touchend', function(e) {
            e.preventDefault();
            clearTimeout(pressTimer);
            
            if (isRecording) {
                console.log('üëÜ Touch solto - parando grava√ß√£o');
                stopRecording();
            } else {
                if (!isTranslating) {
                    tapMode = true;
                    console.log('üëÜ Touch r√°pido - iniciando grava√ß√£o');
                    startRecording();
                    showRecordingModal();
                }
            }
        });
        
        recordButton.addEventListener('click', function(e) {
            e.preventDefault();
            if (recordButton.disabled || isTranslating) {
                console.log('‚ö†Ô∏è Bot√£o desabilitado ou traduzindo');
                return;
            }
            
            if (isRecording) {
                console.log('üñ±Ô∏è Clique - parando grava√ß√£o');
                stopRecording();
            } else {
                console.log('üñ±Ô∏è Clique - iniciando grava√ß√£o');
                startRecording();
                showRecordingModal();
            }
        });
    }
    
    if (sendButton) {
        sendButton.addEventListener('click', function() {
            console.log('üì§ Bot√£o enviar - parando grava√ß√£o');
            stopRecording();
        });
    }
    
    if (speakerButton) {
        speakerButton.addEventListener('click', function() {
            console.log('üîä Bot√£o speaker - alternando fala');
            toggleSpeech();
        });
    }

    // ‚úÖ CONFIGURA√á√ÉO FINAL SINCRONIZADA
    console.log(`üéØ Tradutor notificador completamente sincronizado: ${window.meuIdiomaLocal} ‚Üí ${window.meuIdiomaRemoto}`);
    console.log('üîç Estado final:', {
        recordButton: !!recordButton,
        speakerButton: !!speakerButton,
        textoRecebido: !!textoRecebido,
        rtcCore: !!window.rtcCore,
        dataChannel: window.rtcCore ? window.rtcCore.dataChannel?.readyState : 'n√£o dispon√≠vel'
    });
    
    recordButton.disabled = false;
}

// ‚úÖ INICIALIZA√á√ÉO ROBUSTA COM VERIFICA√á√ÉO
function startTranslatorSafely() {
    console.log('üöÄ Iniciando tradutor notificador com verifica√ß√£o de seguran√ßa...');
    
    // Verifica se o DOM est√° pronto
    if (document.readyState === 'loading') {
        console.log('‚è≥ DOM ainda carregando...');
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(initializeTranslator, 1000);
        });
    } else {
        console.log('‚úÖ DOM j√° carregado, iniciando tradutor...');
        setTimeout(initializeTranslator, 1000);
    }
}

// Inicia o tradutor de forma segura
startTranslatorSafely();
