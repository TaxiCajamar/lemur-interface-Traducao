// ===== TRADUTOR OTIMIZADO E SINCRONIZADO - RECEIVER =====

// üåê DETEC√á√ÉO DE NAVEGADOR MOBILE (para uso no tradutor)
function isMobileSafari() {
    return /iP(hone|od|ad).+Safari/i.test(navigator.userAgent);
}

// ===== FUN√á√ÉO DE TRADU√á√ÉO ATUALIZADA =====
async function translateText(text) {
    try {
        const response = await fetch('https://chat-tradutor-bvvx.onrender.com/translate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                text: text,
                targetLang: window.meuIdiomaRemoto || 'en' // ‚úÖ USA IDIOMA GUARDADO
            })
        });

        const result = await response.json();
        const translatedText = result.translatedText || text;
        return translatedText;
        
    } catch (error) {
        console.error('‚ùå Erro na tradu√ß√£o:', error);
        return text;
    }
}

// ‚úÖ FUN√á√ÉO PARA PROCESSAR TEXTO (Safari + Chrome)
async function processarTextoParaTraducao(texto) {
    if (!texto.trim()) return;
    
    console.log('üé§ Processando texto para tradu√ß√£o:', texto);
    
    // Mostra feedback visual
    const textoRecebido = document.getElementById('texto-recebido');
    if (textoRecebido) {
        textoRecebido.textContent = "Traduzindo...";
        textoRecebido.style.opacity = '1';
    }
    
    try {
        // Traduz o texto
        const translation = await translateText(texto);
        
        if (translation && translation.trim() !== "") {
            console.log(`üåê Traduzido: "${texto}" ‚Üí "${translation}"`);
            
            // Envia via WebRTC
            enviarParaOutroCelular(translation);
            
            // Mostra no elemento de texto recebido (feedback local)
            if (textoRecebido) {
                textoRecebido.textContent = translation;
            }
        } else {
            console.log('‚ùå Tradu√ß√£o vazia ou falhou');
            if (textoRecebido) {
                textoRecebido.textContent = "Erro na tradu√ß√£o";
            }
        }
    } catch (error) {
        console.error('Erro na tradu√ß√£o:', error);
        if (textoRecebido) {
            textoRecebido.textContent = "Erro na tradu√ß√£o";
        }
    }
}

// ===== INICIALIZA√á√ÉO DO TRADUTOR SINCRONIZADA =====
function initializeTranslator() {
    console.log('üéØ Iniciando tradutor receiver...');

    // ===== VERIFICA√á√ÉO DE DEPEND√äNCIAS CR√çTICAS =====
    console.log('üîç Verificando depend√™ncias do receiver-ui.js...');
    
    // ‚úÖ VERIFICA SE RECEIVER-UI.JS J√Å CONFIGUROU TUDO
    if (!window.meuIdiomaLocal || !window.meuIdiomaRemoto) {
        console.log('‚è≥ Aguardando receiver-ui.js configurar idiomas...', {
            meuIdiomaLocal: window.meuIdiomaLocal,
            meuIdiomaRemoto: window.meuIdiomaRemoto
        });
        setTimeout(initializeTranslator, 500);
        return;
    }
    
    // ‚úÖ VERIFICA SE WEBRTC EST√Å PRONTO
    if (!window.rtcCore) {
        console.log('‚è≥ Aguardando WebRTC inicializar...');
        setTimeout(initializeTranslator, 500);
        return;
    }

    // üéØ CONFIGURA√á√ÉO DE IDIOMAS SINCRONIZADA
    const IDIOMA_ORIGEM = window.meuIdiomaLocal || 'pt-BR';
    const IDIOMA_DESTINO = window.meuIdiomaRemoto || 'en';
    const IDIOMA_FALA = window.meuIdiomaRemoto || 'en-US';
    
    console.log('üî§ Idiomas sincronizados:', { 
        origem: IDIOMA_ORIGEM, 
        destino: IDIOMA_DESTINO,
        fala: IDIOMA_FALA 
    });

    // üé§ ELEMENTOS VISUAIS
    const recordButton = document.getElementById('recordButton');
    const recordingModal = document.getElementById('recordingModal');
    const recordingTimer = document.getElementById('recordingTimer');
    const sendButton = document.getElementById('sendButton');
    const speakerButton = document.getElementById('speakerButton');
    const textoRecebido = document.getElementById('texto-recebido');

    // ‚úÖ SAFARI: ABRE TECLADO NATIVO QUANDO CLICA NO MICROFONE
    if (isMobileSafari()) {
        console.log('üì± Safari iOS - configurando teclado nativo');
        
        // 1. ENCONTRA o campo de input do tradutor que J√Å EXISTE
        const campoEntrada = document.querySelector('input[type="text"]') || 
                            document.getElementById('texto-entrada') ||
                            document.querySelector('.text-input') ||
                            document.querySelector('input');
        
        if (campoEntrada) {
            console.log('‚úÖ Safari: Campo de entrada encontrado');
            
            // 2. QUANDO CLICA NO BOT√ÉO MICROFONE ‚Üí ABRE TECLADO
            recordButton.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('üì± Safari: Abrindo teclado nativo...');
                campoEntrada.focus(); // ‚¨ÖÔ∏è ISSO ABRE TECLADO DO IPHONE
            });
            
            // 3. QUANDO USU√ÅRIO TERMINA DE FALAR/DIGITAR ‚Üí ENVIA PARA TRADU√á√ÉO
            campoEntrada.addEventListener('change', function() {
                const texto = this.value.trim();
                if (texto) {
                    console.log('üé§ Safari - Texto para traduzir:', texto);
                    
                    // ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è SEU C√ìDIGO ORIGINAL FAZ O RESTO ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
                    // - Envia para API de tradu√ß√£o
                    // - Recebe tradu√ß√£o
                    // - Envia via WebRTC para outro celular
                    processarTextoParaTraducao(texto);
                    
                    this.value = ''; // Limpa campo
                }
            });
            
            // 4. TAMB√âM CAPTURA ENTER (caso usu√°rio digite)
            campoEntrada.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    const texto = this.value.trim();
                    if (texto) {
                        console.log('üé§ Safari - Texto com Enter:', texto);
                        processarTextoParaTraducao(texto);
                        this.value = '';
                    }
                }
            });
        } else {
            console.log('‚ùå Safari: Nenhum campo de entrada encontrado');
        }
    }

    if (!recordButton || !textoRecebido) {
        console.log('‚è≥ Aguardando elementos do tradutor...');
        setTimeout(initializeTranslator, 300);
        return;
    }

    // üéôÔ∏è CONFIGURA√á√ÉO DE VOZ (apenas para Chrome)
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const SpeechSynthesis = window.speechSynthesis;
    
    let recognition = null;
    
    // S√≥ configura recognition se N√ÉO for Safari e se a API existir
    if (!isMobileSafari() && SpeechRecognition) {
        recognition = new SpeechRecognition();
        recognition.lang = IDIOMA_ORIGEM;
        recognition.continuous = false;
        recognition.interimResults = true;
    } else if (!isMobileSafari()) {
        console.log('‚ùå SpeechRecognition n√£o suportado');
        if (recordButton) recordButton.style.display = 'none';
        return;
    }
    
    if (!SpeechSynthesis && speakerButton) {
        console.log('‚ùå SpeechSynthesis n√£o suportado');
        speakerButton.style.display = 'none';
    }

    // ‚è±Ô∏è VARI√ÅVEIS DE ESTADO (COMPLETAS)
    let isRecording = false;
    let isTranslating = false;
    let recordingStartTime = 0;
    let timerInterval = null;
    let pressTimer;
    let tapMode = false;
    let isSpeechPlaying = false;
    let microphonePermissionGranted = false;
    let lastTranslationTime = 0;

    // ‚è±Ô∏è SISTEMA DE TIMER
    function updateTimer() {
        const elapsedSeconds = Math.floor((Date.now() - recordingStartTime) / 1000);
        const minutes = Math.floor(elapsedSeconds / 60);
        const seconds = elapsedSeconds % 60;
        if (recordingTimer) {
            recordingTimer.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }
        
        if (elapsedSeconds >= 30) {
            console.log('‚è∞ Tempo m√°ximo de grava√ß√£o atingido (30s)');
            stopRecording();
        }
    }

    // üéôÔ∏è CONTROLES DE GRAVA√á√ÉO (COM TODOS OS VISUAIS)
    function showRecordingModal() {
        if (recordingModal) recordingModal.classList.add('visible');
        recordingStartTime = Date.now();
        updateTimer();
        timerInterval = setInterval(updateTimer, 1000);
        console.log('üì± Modal de grava√ß√£o vis√≠vel');
    }

    function hideRecordingModal() {
        if (recordingModal) recordingModal.classList.remove('visible');
        clearInterval(timerInterval);
        console.log('üì± Modal de grava√ß√£o escondido');
    }

    // ‚úÖ FUN√á√ÉO DE PERMISS√ÉO H√çBRIDA MOBILE
    async function requestMicrophonePermissionOnClick() {
        try {
            console.log('üé§ Solicitando permiss√£o (modo mobile h√≠brido)...');
            
            // ‚úÖ PRIMEIRO: No Safari, verifica se j√° tem permiss√£o do receiver-ui.js
            if (isMobileSafari() && window.microphonePermissionGranted && window.microphoneStream) {
                console.log('üì± Safari: Reutilizando stream existente do receiver-ui.js');
                microphonePermissionGranted = true;
                recordButton.disabled = false;
                return true;
            }
            
            console.log('üé§ Solicitando permiss√£o de microfone...');
            
            const stream = await navigator.mediaDevices.getUserMedia({ 
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    sampleRate: 44100
                }
            });
            
            // ‚úÖ H√çBRIDO: Comportamento diferente por navegador
            if (isMobileSafari()) {
                // ‚úÖ SAFARI: Guarda o stream para reutilizar
                window.microphoneStream = stream;
                window.microphonePermissionGranted = true;
                console.log('‚úÖ Safari: Stream de microfone guardado');
            } else {
                // ‚úÖ CHROME: Comportamento original - para o stream
                setTimeout(() => {
                    stream.getTracks().forEach(track => track.stop());
                }, 100);
            }
            
            microphonePermissionGranted = true;
            recordButton.disabled = false;
            
            console.log('‚úÖ Microfone autorizado (mobile h√≠brido)');
            return true;
            
        } catch (error) {
            console.error('‚ùå Permiss√£o de microfone negada:', error);
            recordButton.disabled = true;
            
            // Mensagem espec√≠fica por navegador
            if (isMobileSafari()) {
                alert('No Safari: Toque em "Permitir" quando solicitado o microfone.');
            } else {
                alert('Para usar o tradutor de voz, permita o acesso ao microfone quando solicitado.');
            }
            return false;
        }
    }

    function startRecording() {
        // ‚úÖ Se for Safari, n√£o usa grava√ß√£o - j√° tem teclado nativo
        if (isMobileSafari()) {
            console.log('üì± Safari: Use o teclado nativo');
            return;
        }
        
        if (isRecording || isTranslating) {
            console.log('‚ö†Ô∏è J√° est√° gravando ou traduzindo');
            return;
        }
        
        try {
            // ‚úÖ SOLICITA PERMISS√ÉO APENAS NA PRIMEIRA VEZ
            if (!microphonePermissionGranted) {
                console.log('üé§ Primeira vez - solicitando permiss√£o...');
                requestMicrophonePermissionOnClick().then(permitted => {
                    if (permitted) {
                        // Se permiss√£o concedida, inicia grava√ß√£o
                        doStartRecording();
                    }
                });
                return;
            }
            
            doStartRecording();
            
        } catch (error) {
            console.error('‚ùå Erro ao iniciar grava√ß√£o:', error);
            stopRecording();
        }
    }

    function doStartRecording() {
        if (!recognition) {
            console.log('‚ùå Recognition n√£o dispon√≠vel');
            return;
        }
        
        recognition.start();
        isRecording = true;
        
        // ‚úÖ VISUAL: Bot√£o fica verde
        recordButton.classList.add('recording');
        showRecordingModal();
        
        // ‚úÖ VISUAL: Desabilita bot√£o speaker durante grava√ß√£o
        if (speakerButton) {
            speakerButton.disabled = true;
        }
        
        console.log('üéôÔ∏è Grava√ß√£o iniciada');
    }

    function stopRecording() {
        if (!isRecording) {
            console.log('‚ö†Ô∏è N√£o estava gravando');
            return;
        }
        
        isRecording = false;
        if (recognition) {
            recognition.stop();
        }
        
        // ‚úÖ VISUAL: Bot√£o volta ao normal
        recordButton.classList.remove('recording');
        hideRecordingModal();
        
        // ‚úÖ VISUAL: Reativa bot√£o speaker ap√≥s grava√ß√£o
        if (speakerButton) {
            speakerButton.disabled = false;
        }
        
        console.log('‚èπÔ∏è Parando grava√ß√£o');
    }

    // üîä SISTEMA DE VOZ
    function speakText(text) {
        if (!SpeechSynthesis || !text) {
            console.log('‚ùå SpeechSynthesis n√£o dispon√≠vel ou texto vazio');
            return;
        }
        
        window.speechSynthesis.cancel();
        const utterance = new SpeechSynthesisUtterance(text);
        
        // ‚úÖ USA O IDIOMA REMOTO CORRETO (GUARDADO)
        utterance.lang = window.meuIdiomaRemoto || 'en-US';
        utterance.rate = 0.9;
        utterance.volume = 0.8;
        
        utterance.onstart = function() {
            isSpeechPlaying = true;
            if (speakerButton) speakerButton.textContent = '‚èπ';
            console.log('üîä Iniciando fala do texto');
        };
        
        utterance.onend = function() {
            isSpeechPlaying = false;
            if (speakerButton) speakerButton.textContent = 'üîä';
            console.log('üîä Fala terminada');
        };
        
        utterance.onerror = function(event) {
            isSpeechPlaying = false;
            if (speakerButton) speakerButton.textContent = 'üîä';
            console.error('‚ùå Erro na fala:', event.error);
        };
        
        window.speechSynthesis.speak(utterance);
    }

    function toggleSpeech() {
        if (!SpeechSynthesis) {
            console.log('‚ùå SpeechSynthesis n√£o suportado');
            return;
        }
        
        if (isSpeechPlaying) {
            window.speechSynthesis.cancel();
            isSpeechPlaying = false;
            if (speakerButton) speakerButton.textContent = 'üîä';
            console.log('‚èπ Fala cancelada');
        } else {
            if (textoRecebido && textoRecebido.textContent) {
                const textToSpeak = textoRecebido.textContent.trim();
                if (textToSpeak !== "") {
                    console.log(`üîä Falando texto: "${textToSpeak.substring(0, 50)}..."`);
                    speakText(textToSpeak);
                } else {
                    console.log('‚ö†Ô∏è Nenhum texto para falar');
                }
            } else {
                console.log('‚ö†Ô∏è Elemento texto-recebido n√£o encontrado');
            }
        }
    }

    // ===== FUN√á√ÉO MELHORADA PARA ENVIAR TEXTO =====
    function enviarParaOutroCelular(texto) {
        // ‚úÖ USA O CANAL DO WEBRTCCORE CORRETAMENTE
        if (window.rtcCore && window.rtcCore.dataChannel && 
            window.rtcCore.dataChannel.readyState === 'open') {
            window.rtcCore.dataChannel.send(texto);
            console.log('‚úÖ Texto enviado via WebRTC Core:', texto);
            return true;
        } else {
            console.log('‚è≥ Canal WebRTC n√£o dispon√≠vel. Estado:', 
                window.rtcCore ? window.rtcCore.dataChannel?.readyState : 'rtcCore n√£o existe');
            setTimeout(() => enviarParaOutroCelular(texto), 1000);
            return false;
        }
    }

    // üéôÔ∏è EVENTOS DE RECONHECIMENTO (apenas para Chrome)
    if (recognition) {
        recognition.onresult = function(event) {
            let finalTranscript = '';
            
            for (let i = event.resultIndex; i < event.results.length; i++) {
                if (event.results[i].isFinal) {
                    finalTranscript += event.results[i][0].transcript;
                }
            }
            
            // ‚úÖ PROCESSO DE TRADU√á√ÉO CORRETO E SINCRONIZADO
            if (finalTranscript && !isTranslating) {
                const now = Date.now();
                if (now - lastTranslationTime > 1000) {
                    lastTranslationTime = now;
                    isTranslating = true;
                    
                    console.log(`üé§ Reconhecido: "${finalTranscript}"`);
                    
                    translateText(finalTranscript).then(translation => {
                        if (translation && translation.trim() !== "") {
                            console.log(`üåê Traduzido: "${finalTranscript}" ‚Üí "${translation}"`);
                            
                            // ‚úÖ ENVIA VIA FUN√á√ÉO MELHORADA
                            enviarParaOutroCelular(translation);
                        } else {
                            console.log('‚ùå Tradu√ß√£o vazia ou falhou');
                        }
                        isTranslating = false;
                    }).catch(error => {
                        console.error('Erro na tradu√ß√£o:', error);
                        isTranslating = false;
                    });
                }
            }
        };
        
        recognition.onerror = function(event) {
            console.log('‚ùå Erro recognition:', event.error);
            stopRecording();
        };
        
        recognition.onend = function() {
            if (isRecording) {
                console.log('üîö Reconhecimento terminado automaticamente');
                stopRecording();
            }
        };
    }

    // üéÆ EVENTOS DE BOT√ÉO (COM TODOS OS VISUAIS ORIGINAIS)
    if (recordButton && !isMobileSafari()) {
        recordButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            if (recordButton.disabled || isTranslating) {
                console.log('‚ö†Ô∏è Bot√£o desabilitado ou traduzindo');
                return;
            }
            
            if (!isRecording) {
                pressTimer = setTimeout(() => {
                    tapMode = false;
                    console.log('üëÜ Touch longo - iniciando grava√ß√£o');
                    startRecording();
                    showRecordingModal();
                }, 300);
            }
        });
        
        recordButton.addEventListener('touchend', function(e) {
            e.preventDefault();
            clearTimeout(pressTimer);
            
            if (isRecording) {
                console.log('üëÜ Touch solto - parando grava√ß√£o');
                stopRecording();
            } else {
                if (!isTranslating) {
                    tapMode = true;
                    console.log('üëÜ Touch r√°pido - iniciando grava√ß√£o');
                    startRecording();
                    showRecordingModal();
                }
            }
        });
        
        recordButton.addEventListener('click', function(e) {
            e.preventDefault();
            if (recordButton.disabled || isTranslating) {
                console.log('‚ö†Ô∏è Bot√£o desabilitado ou traduzindo');
                return;
            }
            
            if (isRecording) {
                console.log('üñ±Ô∏è Clique - parando grava√ß√£o');
                stopRecording();
            } else {
                console.log('üñ±Ô∏è Clique - iniciando grava√ß√£o');
                startRecording();
                showRecordingModal();
            }
        });
    }
    
    if (sendButton) {
        sendButton.addEventListener('click', function() {
            console.log('üì§ Bot√£o enviar - parando grava√ß√£o');
            stopRecording();
        });
    }
    
    if (speakerButton) {
        speakerButton.addEventListener('click', function() {
            console.log('üîä Bot√£o speaker - alternando fala');
            toggleSpeech();
        });
    }

    // ‚úÖ CONFIGURA√á√ÉO FINAL SINCRONIZADA
    console.log(`üéØ Tradutor receiver completamente sincronizado: ${window.meuIdiomaLocal} ‚Üí ${window.meuIdiomaRemoto}`);
    console.log('üîç Estado final:', {
        recordButton: !!recordButton,
        speakerButton: !!speakerButton,
        textoRecebido: !!textoRecebido,
        rtcCore: !!window.rtcCore,
        dataChannel: window.rtcCore ? window.rtcCore.dataChannel?.readyState : 'n√£o dispon√≠vel',
        isMobileSafari: isMobileSafari()
    });
    
    if (!isMobileSafari()) {
        recordButton.disabled = false;
    }
}

// ‚úÖ INICIALIZA√á√ÉO ROBUSTA COM VERIFICA√á√ÉO
function startTranslatorSafely() {
    console.log('üöÄ Iniciando tradutor receiver com verifica√ß√£o de seguran√ßa...');
    
    // Verifica se o DOM est√° pronto
    if (document.readyState === 'loading') {
        console.log('‚è≥ DOM ainda carregando...');
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(initializeTranslator, 1000);
        });
    } else {
        console.log('‚úÖ DOM j√° carregado, iniciando tradutor...');
        setTimeout(initializeTranslator, 1000);
    }
}

// Inicia o tradutor de forma segura
startTranslatorSafely();// ===== TRADUTOR OTIMIZADO E SINCRONIZADO - RECEIVER =====

// üåê DETEC√á√ÉO DE NAVEGADOR MOBILE (para uso no tradutor)
function isMobileSafari() {
    return /iP(hone|od|ad).+Safari/i.test(navigator.userAgent);
}

// ===== FUN√á√ÉO DE TRADU√á√ÉO ATUALIZADA =====
async function translateText(text) {
    try {
        const response = await fetch('https://chat-tradutor-bvvx.onrender.com/translate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                text: text,
                targetLang: window.meuIdiomaRemoto || 'en' // ‚úÖ USA IDIOMA GUARDADO
            })
        });

        const result = await response.json();
        const translatedText = result.translatedText || text;
        return translatedText;
        
    } catch (error) {
        console.error('‚ùå Erro na tradu√ß√£o:', error);
        return text;
    }
}

// ‚úÖ FUN√á√ÉO PARA PROCESSAR TEXTO (Safari + Chrome)
async function processarTextoParaTraducao(texto) {
    if (!texto.trim()) return;
    
    console.log('üé§ Processando texto para tradu√ß√£o:', texto);
    
    // Mostra feedback visual
    const textoRecebido = document.getElementById('texto-recebido');
    if (textoRecebido) {
        textoRecebido.textContent = "Traduzindo...";
        textoRecebido.style.opacity = '1';
    }
    
    try {
        // Traduz o texto
        const translation = await translateText(texto);
        
        if (translation && translation.trim() !== "") {
            console.log(`üåê Traduzido: "${texto}" ‚Üí "${translation}"`);
            
            // Envia via WebRTC
            enviarParaOutroCelular(translation);
            
            // Mostra no elemento de texto recebido (feedback local)
            if (textoRecebido) {
                textoRecebido.textContent = translation;
            }
        } else {
            console.log('‚ùå Tradu√ß√£o vazia ou falhou');
        }
    } catch (error) {
        console.error('Erro na tradu√ß√£o:', error);
        if (textoRecebido) {
            textoRecebido.textContent = "Erro na tradu√ß√£o";
        }
    }
}

// ===== INICIALIZA√á√ÉO DO TRADUTOR SINCRONIZADA =====
function initializeTranslator() {
    console.log('üéØ Iniciando tradutor receiver...');

    // ===== VERIFICA√á√ÉO DE DEPEND√äNCIAS CR√çTICAS =====
    console.log('üîç Verificando depend√™ncias do receiver-ui.js...');
    
    // ‚úÖ VERIFICA SE RECEIVER-UI.JS J√Å CONFIGUROU TUDO
    if (!window.meuIdiomaLocal || !window.meuIdiomaRemoto) {
        console.log('‚è≥ Aguardando receiver-ui.js configurar idiomas...', {
            meuIdiomaLocal: window.meuIdiomaLocal,
            meuIdiomaRemoto: window.meuIdiomaRemoto
        });
        setTimeout(initializeTranslator, 500);
        return;
    }
    
    // ‚úÖ VERIFICA SE WEBRTC EST√Å PRONTO
    if (!window.rtcCore) {
        console.log('‚è≥ Aguardando WebRTC inicializar...');
        setTimeout(initializeTranslator, 500);
        return;
    }

    // üéØ CONFIGURA√á√ÉO DE IDIOMAS SINCRONIZADA
    const IDIOMA_ORIGEM = window.meuIdiomaLocal || 'pt-BR';
    const IDIOMA_DESTINO = window.meuIdiomaRemoto || 'en';
    const IDIOMA_FALA = window.meuIdiomaRemoto || 'en-US';
    
    console.log('üî§ Idiomas sincronizados:', { 
        origem: IDIOMA_ORIGEM, 
        destino: IDIOMA_DESTINO,
        fala: IDIOMA_FALA 
    });

    // üé§ ELEMENTOS VISUAIS
    const recordButton = document.getElementById('recordButton');
    const recordingModal = document.getElementById('recordingModal');
    const recordingTimer = document.getElementById('recordingTimer');
    const sendButton = document.getElementById('sendButton');
    const speakerButton = document.getElementById('speakerButton');
    const textoRecebido = document.getElementById('texto-recebido');

    // ‚úÖ SAFARI: CONFIGURA√á√ÉO DO INPUT NATIVO
    let safariVoiceInput = null;

    // Se for Safari, cria input de voz nativo
    if (isMobileSafari()) {
        console.log('üì± Safari iOS detectado - usando input de voz nativo');
        
        // Esconde o bot√£o de grava√ß√£o original
        if (recordButton) {
            recordButton.style.display = 'none';
        }
        
        // Cria input com suporte a ditado
        safariVoiceInput = document.createElement('input');
        safariVoiceInput.type = 'text';
        safariVoiceInput.placeholder = 'Toque aqui e diga algo...';
        safariVoiceInput.setAttribute('speech', '');
        safariVoiceInput.setAttribute('x-webkit-speech', '');
        safariVoiceInput.style.width = '80%';
        safariVoiceInput.style.padding = '15px';
        safariVoiceInput.style.margin = '10px auto';
        safariVoiceInput.style.fontSize = '16px';
        safariVoiceInput.style.border = '2px solid #007AFF';
        safariVoiceInput.style.borderRadius = '25px';
        safariVoiceInput.style.textAlign = 'center';
        safariVoiceInput.style.display = 'block';
        
        // Adiciona evento quando o usu√°rio termina de falar/digitar
        safariVoiceInput.addEventListener('change', function() {
            const textoFalado = this.value.trim();
            if (textoFalado) {
                console.log('üé§ Safari - Texto falado:', textoFalado);
                processarTextoParaTraducao(textoFalado);
                this.value = ''; // Limpa o campo
            }
        });
        
        // Tamb√©m captura Enter (caso o usu√°rio digite)
        safariVoiceInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                const textoFalado = this.value.trim();
                if (textoFalado) {
                    console.log('üé§ Safari - Texto digitado:', textoFalado);
                    processarTextoParaTraducao(textoFalado);
                    this.value = ''; // Limpa o campo
                }
            }
        });
        
        // Adiciona o input na interface (no lugar do bot√£o de grava√ß√£o)
        if (recordButton && recordButton.parentNode) {
            recordButton.parentNode.appendChild(safariVoiceInput);
        }
    }

    if (!recordButton || !textoRecebido) {
        console.log('‚è≥ Aguardando elementos do tradutor...');
        setTimeout(initializeTranslator, 300);
        return;
    }

    // üéôÔ∏è CONFIGURA√á√ÉO DE VOZ (apenas para Chrome)
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const SpeechSynthesis = window.speechSynthesis;
    
    let recognition = null;
    
    // S√≥ configura recognition se N√ÉO for Safari e se a API existir
    if (!isMobileSafari() && SpeechRecognition) {
        recognition = new SpeechRecognition();
        recognition.lang = IDIOMA_ORIGEM;
        recognition.continuous = false;
        recognition.interimResults = true;
    } else if (!isMobileSafari()) {
        console.log('‚ùå SpeechRecognition n√£o suportado');
        if (recordButton) recordButton.style.display = 'none';
        return;
    }
    
    if (!SpeechSynthesis && speakerButton) {
        console.log('‚ùå SpeechSynthesis n√£o suportado');
        speakerButton.style.display = 'none';
    }

    // ‚è±Ô∏è VARI√ÅVEIS DE ESTADO (COMPLETAS)
    let isRecording = false;
    let isTranslating = false;
    let recordingStartTime = 0;
    let timerInterval = null;
    let pressTimer;
    let tapMode = false;
    let isSpeechPlaying = false;
    let microphonePermissionGranted = false;
    let lastTranslationTime = 0;

    // ‚è±Ô∏è SISTEMA DE TIMER
    function updateTimer() {
        const elapsedSeconds = Math.floor((Date.now() - recordingStartTime) / 1000);
        const minutes = Math.floor(elapsedSeconds / 60);
        const seconds = elapsedSeconds % 60;
        if (recordingTimer) {
            recordingTimer.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }
        
        if (elapsedSeconds >= 30) {
            console.log('‚è∞ Tempo m√°ximo de grava√ß√£o atingido (30s)');
            stopRecording();
        }
    }

    // üéôÔ∏è CONTROLES DE GRAVA√á√ÉO (COM TODOS OS VISUAIS)
    function showRecordingModal() {
        if (recordingModal) recordingModal.classList.add('visible');
        recordingStartTime = Date.now();
        updateTimer();
        timerInterval = setInterval(updateTimer, 1000);
        console.log('üì± Modal de grava√ß√£o vis√≠vel');
    }

    function hideRecordingModal() {
        if (recordingModal) recordingModal.classList.remove('visible');
        clearInterval(timerInterval);
        console.log('üì± Modal de grava√ß√£o escondido');
    }

    // ‚úÖ FUN√á√ÉO DE PERMISS√ÉO H√çBRIDA MOBILE
    async function requestMicrophonePermissionOnClick() {
        try {
            console.log('üé§ Solicitando permiss√£o (modo mobile h√≠brido)...');
            
            // ‚úÖ PRIMEIRO: No Safari, verifica se j√° tem permiss√£o do receiver-ui.js
            if (isMobileSafari() && window.microphonePermissionGranted && window.microphoneStream) {
                console.log('üì± Safari: Reutilizando stream existente do receiver-ui.js');
                microphonePermissionGranted = true;
                recordButton.disabled = false;
                return true;
            }
            
            console.log('üé§ Solicitando permiss√£o de microfone...');
            
            const stream = await navigator.mediaDevices.getUserMedia({ 
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    sampleRate: 44100
                }
            });
            
            // ‚úÖ H√çBRIDO: Comportamento diferente por navegador
            if (isMobileSafari()) {
                // ‚úÖ SAFARI: Guarda o stream para reutilizar
                window.microphoneStream = stream;
                window.microphonePermissionGranted = true;
                console.log('‚úÖ Safari: Stream de microfone guardado');
            } else {
                // ‚úÖ CHROME: Comportamento original - para o stream
                setTimeout(() => {
                    stream.getTracks().forEach(track => track.stop());
                }, 100);
            }
            
            microphonePermissionGranted = true;
            recordButton.disabled = false;
            
            console.log('‚úÖ Microfone autorizado (mobile h√≠brido)');
            return true;
            
        } catch (error) {
            console.error('‚ùå Permiss√£o de microfone negada:', error);
            recordButton.disabled = true;
            
            // Mensagem espec√≠fica por navegador
            if (isMobileSafari()) {
                alert('No Safari: Toque em "Permitir" quando solicitado o microfone.');
            } else {
                alert('Para usar o tradutor de voz, permita o acesso ao microfone quando solicitado.');
            }
            return false;
        }
    }

    function startRecording() {
        // ‚úÖ Se for Safari, n√£o usa grava√ß√£o - j√° tem input nativo
        if (isMobileSafari()) {
            console.log('üì± Safari: Use o campo de texto com microfone');
            if (safariVoiceInput) {
                safariVoiceInput.focus(); // Foca no input
            }
            return;
        }
        
        if (isRecording || isTranslating) {
            console.log('‚ö†Ô∏è J√° est√° gravando ou traduzindo');
            return;
        }
        
        try {
            // ‚úÖ SOLICITA PERMISS√ÉO APENAS NA PRIMEIRA VEZ
            if (!microphonePermissionGranted) {
                console.log('üé§ Primeira vez - solicitando permiss√£o...');
                requestMicrophonePermissionOnClick().then(permitted => {
                    if (permitted) {
                        // Se permiss√£o concedida, inicia grava√ß√£o
                        doStartRecording();
                    }
                });
                return;
            }
            
            doStartRecording();
            
        } catch (error) {
            console.error('‚ùå Erro ao iniciar grava√ß√£o:', error);
            stopRecording();
        }
    }

    function doStartRecording() {
        if (!recognition) {
            console.log('‚ùå Recognition n√£o dispon√≠vel');
            return;
        }
        
        recognition.start();
        isRecording = true;
        
        // ‚úÖ VISUAL: Bot√£o fica verde
        recordButton.classList.add('recording');
        showRecordingModal();
        
        // ‚úÖ VISUAL: Desabilita bot√£o speaker durante grava√ß√£o
        if (speakerButton) {
            speakerButton.disabled = true;
        }
        
        console.log('üéôÔ∏è Grava√ß√£o iniciada');
    }

    function stopRecording() {
        if (!isRecording) {
            console.log('‚ö†Ô∏è N√£o estava gravando');
            return;
        }
        
        isRecording = false;
        if (recognition) {
            recognition.stop();
        }
        
        // ‚úÖ VISUAL: Bot√£o volta ao normal
        recordButton.classList.remove('recording');
        hideRecordingModal();
        
        // ‚úÖ VISUAL: Reativa bot√£o speaker ap√≥s grava√ß√£o
        if (speakerButton) {
            speakerButton.disabled = false;
        }
        
        console.log('‚èπÔ∏è Parando grava√ß√£o');
    }

    // üîä SISTEMA DE VOZ
    function speakText(text) {
        if (!SpeechSynthesis || !text) {
            console.log('‚ùå SpeechSynthesis n√£o dispon√≠vel ou texto vazio');
            return;
        }
        
        window.speechSynthesis.cancel();
        const utterance = new SpeechSynthesisUtterance(text);
        
        // ‚úÖ USA O IDIOMA REMOTO CORRETO (GUARDADO)
        utterance.lang = window.meuIdiomaRemoto || 'en-US';
        utterance.rate = 0.9;
        utterance.volume = 0.8;
        
        utterance.onstart = function() {
            isSpeechPlaying = true;
            if (speakerButton) speakerButton.textContent = '‚èπ';
            console.log('üîä Iniciando fala do texto');
        };
        
        utterance.onend = function() {
            isSpeechPlaying = false;
            if (speakerButton) speakerButton.textContent = 'üîä';
            console.log('üîä Fala terminada');
        };
        
        utterance.onerror = function(event) {
            isSpeechPlaying = false;
            if (speakerButton) speakerButton.textContent = 'üîä';
            console.error('‚ùå Erro na fala:', event.error);
        };
        
        window.speechSynthesis.speak(utterance);
    }

    function toggleSpeech() {
        if (!SpeechSynthesis) {
            console.log('‚ùå SpeechSynthesis n√£o suportado');
            return;
        }
        
        if (isSpeechPlaying) {
            window.speechSynthesis.cancel();
            isSpeechPlaying = false;
            if (speakerButton) speakerButton.textContent = 'üîä';
            console.log('‚èπ Fala cancelada');
        } else {
            if (textoRecebido && textoRecebido.textContent) {
                const textToSpeak = textoRecebido.textContent.trim();
                if (textToSpeak !== "") {
                    console.log(`üîä Falando texto: "${textToSpeak.substring(0, 50)}..."`);
                    speakText(textToSpeak);
                } else {
                    console.log('‚ö†Ô∏è Nenhum texto para falar');
                }
            } else {
                console.log('‚ö†Ô∏è Elemento texto-recebido n√£o encontrado');
            }
        }
    }

    // ===== FUN√á√ÉO MELHORADA PARA ENVIAR TEXTO =====
    function enviarParaOutroCelular(texto) {
        // ‚úÖ USA O CANAL DO WEBRTCCORE CORRETAMENTE
        if (window.rtcCore && window.rtcCore.dataChannel && 
            window.rtcCore.dataChannel.readyState === 'open') {
            window.rtcCore.dataChannel.send(texto);
            console.log('‚úÖ Texto enviado via WebRTC Core:', texto);
            return true;
        } else {
            console.log('‚è≥ Canal WebRTC n√£o dispon√≠vel. Estado:', 
                window.rtcCore ? window.rtcCore.dataChannel?.readyState : 'rtcCore n√£o existe');
            setTimeout(() => enviarParaOutroCelular(texto), 1000);
            return false;
        }
    }

    // üéôÔ∏è EVENTOS DE RECONHECIMENTO (apenas para Chrome)
    if (recognition) {
        recognition.onresult = function(event) {
            let finalTranscript = '';
            
            for (let i = event.resultIndex; i < event.results.length; i++) {
                if (event.results[i].isFinal) {
                    finalTranscript += event.results[i][0].transcript;
                }
            }
            
            // ‚úÖ PROCESSO DE TRADU√á√ÉO CORRETO E SINCRONIZADO
            if (finalTranscript && !isTranslating) {
                const now = Date.now();
                if (now - lastTranslationTime > 1000) {
                    lastTranslationTime = now;
                    isTranslating = true;
                    
                    console.log(`üé§ Reconhecido: "${finalTranscript}"`);
                    
                    translateText(finalTranscript).then(translation => {
                        if (translation && translation.trim() !== "") {
                            console.log(`üåê Traduzido: "${finalTranscript}" ‚Üí "${translation}"`);
                            
                            // ‚úÖ ENVIA VIA FUN√á√ÉO MELHORADA
                            enviarParaOutroCelular(translation);
                        } else {
                            console.log('‚ùå Tradu√ß√£o vazia ou falhou');
                        }
                        isTranslating = false;
                    }).catch(error => {
                        console.error('Erro na tradu√ß√£o:', error);
                        isTranslating = false;
                    });
                }
            }
        };
        
        recognition.onerror = function(event) {
            console.log('‚ùå Erro recognition:', event.error);
            stopRecording();
        };
        
        recognition.onend = function() {
            if (isRecording) {
                console.log('üîö Reconhecimento terminado automaticamente');
                stopRecording();
            }
        };
    }

    // üéÆ EVENTOS DE BOT√ÉO (COM TODOS OS VISUAIS ORIGINAIS)
    if (recordButton && !isMobileSafari()) {
        recordButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            if (recordButton.disabled || isTranslating) {
                console.log('‚ö†Ô∏è Bot√£o desabilitado ou traduzindo');
                return;
            }
            
            if (!isRecording) {
                pressTimer = setTimeout(() => {
                    tapMode = false;
                    console.log('üëÜ Touch longo - iniciando grava√ß√£o');
                    startRecording();
                    showRecordingModal();
                }, 300);
            }
        });
        
        recordButton.addEventListener('touchend', function(e) {
            e.preventDefault();
            clearTimeout(pressTimer);
            
            if (isRecording) {
                console.log('üëÜ Touch solto - parando grava√ß√£o');
                stopRecording();
            } else {
                if (!isTranslating) {
                    tapMode = true;
                    console.log('üëÜ Touch r√°pido - iniciando grava√ß√£o');
                    startRecording();
                    showRecordingModal();
                }
            }
        });
        
        recordButton.addEventListener('click', function(e) {
            e.preventDefault();
            if (recordButton.disabled || isTranslating) {
                console.log('‚ö†Ô∏è Bot√£o desabilitado ou traduzindo');
                return;
            }
            
            if (isRecording) {
                console.log('üñ±Ô∏è Clique - parando grava√ß√£o');
                stopRecording();
            } else {
                console.log('üñ±Ô∏è Clique - iniciando grava√ß√£o');
                startRecording();
                showRecordingModal();
            }
        });
    }
    
    if (sendButton) {
        sendButton.addEventListener('click', function() {
            console.log('üì§ Bot√£o enviar - parando grava√ß√£o');
            stopRecording();
        });
    }
    
    if (speakerButton) {
        speakerButton.addEventListener('click', function() {
            console.log('üîä Bot√£o speaker - alternando fala');
            toggleSpeech();
        });
    }

    // ‚úÖ CONFIGURA√á√ÉO FINAL SINCRONIZADA
    console.log(`üéØ Tradutor receiver completamente sincronizado: ${window.meuIdiomaLocal} ‚Üí ${window.meuIdiomaRemoto}`);
    console.log('üîç Estado final:', {
        recordButton: !!recordButton,
        speakerButton: !!speakerButton,
        textoRecebido: !!textoRecebido,
        rtcCore: !!window.rtcCore,
        dataChannel: window.rtcCore ? window.rtcCore.dataChannel?.readyState : 'n√£o dispon√≠vel',
        isMobileSafari: isMobileSafari()
    });
    
    if (!isMobileSafari()) {
        recordButton.disabled = false;
    }
}

// ‚úÖ INICIALIZA√á√ÉO ROBUSTA COM VERIFICA√á√ÉO
function startTranslatorSafely() {
    console.log('üöÄ Iniciando tradutor receiver com verifica√ß√£o de seguran√ßa...');
    
    // Verifica se o DOM est√° pronto
    if (document.readyState === 'loading') {
        console.log('‚è≥ DOM ainda carregando...');
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(initializeTranslator, 1000);
        });
    } else {
        console.log('‚úÖ DOM j√° carregado, iniciando tradutor...');
        setTimeout(initializeTranslator, 1000);
    }
}

// Inicia o tradutor de forma segura
startTranslatorSafely();
