// ‚úÖ SOLU√á√ÉO OTIMIZADA E SINCRONIZADA - USANDO IDIOMAS GUARDADOS
function initializeTranslator() {
    // ===== VERIFICA√á√ÉO DE DEPEND√äNCIAS CR√çTICAS =====
    console.log('üîç Verificando depend√™ncias do caller-ui.js...');
    
    // ‚úÖ VERIFICA SE CALLER-UI.JS J√Å CONFIGUROU TUDO
    if (!window.meuIdiomaLocal || !window.meuIdiomaRemoto) {
        console.log('‚è≥ Aguardando caller-ui.js configurar idiomas...', {
            meuIdiomaLocal: window.meuIdiomaLocal,
            meuIdiomaRemoto: window.meuIdiomaRemoto
        });
        setTimeout(initializeTranslator, 500);
        return;
    }
    
    // ‚úÖ VERIFICA SE WEBRTC EST√Å PRONTO
    if (!window.rtcCore) {
        console.log('‚è≥ Aguardando WebRTC inicializar...');
        setTimeout(initializeTranslator, 500);
        return;
    }
    
    // ===== CONFIGURA√á√ÉO SIMPLIFICADA =====
    let IDIOMA_ORIGEM = window.meuIdiomaLocal || 'pt-BR';
    let IDIOMA_DESTINO = window.meuIdiomaRemoto || 'en';
    let IDIOMA_FALA = window.meuIdiomaRemoto || 'en-US';
    
    console.log(`üéØ Tradutor sincronizado: ${IDIOMA_ORIGEM} ‚Üí ${IDIOMA_DESTINO}`);
    console.log('‚úÖ Todas as depend√™ncias carregadas!');
    
    // ===== ELEMENTOS DOM =====
    const recordButton = document.getElementById('recordButton');
    const recordingModal = document.getElementById('recordingModal');
    const recordingTimer = document.getElementById('recordingTimer');
    const sendButton = document.getElementById('sendButton');
    const speakerButton = document.getElementById('speakerButton');
    const textoRecebido = document.getElementById('texto-recebido');
    
    // ‚≠ê VERIFICA SE ELEMENTOS CR√çTICOS EXISTEM
    if (!recordButton || !textoRecebido) {
        console.log('Aguardando elementos do DOM...');
        setTimeout(initializeTranslator, 300);
        return;
    }
    
    // ===== FUN√á√ÉO MELHORADA PARA ENVIAR TEXTO =====
    function enviarParaOutroCelular(texto) {
        // ‚úÖ USA O CANAL DO WEBRTCCORE CORRETAMENTE
        if (window.rtcCore && window.rtcCore.dataChannel && 
            window.rtcCore.dataChannel.readyState === 'open') {
            window.rtcCore.dataChannel.send(texto);
            console.log('‚úÖ Texto enviado via WebRTC Core:', texto);
            return true;
        } else {
            console.log('‚è≥ Canal WebRTC n√£o dispon√≠vel. Estado:', 
                window.rtcCore ? window.rtcCore.dataChannel?.readyState : 'rtcCore n√£o existe');
            setTimeout(() => enviarParaOutroCelular(texto), 1000);
            return false;
        }
    }

    // ===== VERIFICA√á√ÉO DE SUPORTE =====
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const SpeechSynthesis = window.speechSynthesis;
    
    if (!SpeechRecognition) {
        console.log('‚ùå SpeechRecognition n√£o suportado');
        if (recordButton) recordButton.style.display = 'none';
        return;
    }
    
    if (!SpeechSynthesis && speakerButton) {
        console.log('‚ùå SpeechSynthesis n√£o suportado');
        speakerButton.style.display = 'none';
    }
    
    let recognition = new SpeechRecognition();
    recognition.lang = IDIOMA_ORIGEM; // ‚úÖ Idioma local correto
    recognition.continuous = false;
    recognition.interimResults = true;
    
    // ===== VARI√ÅVEIS DE ESTADO =====
    let isRecording = false;
    let isTranslating = false;
    let recordingStartTime = 0;
    let timerInterval = null;
    let pressTimer;
    let tapMode = false;
    let isSpeechPlaying = false;
    let microphonePermissionGranted = false;
    let lastTranslationTime = 0;
    
    // ===== FUN√á√ïES PRINCIPAIS =====
    function setupRecognitionEvents() {
        recognition.onresult = function(event) {
            let finalTranscript = '';
            
            for (let i = event.resultIndex; i < event.results.length; i++) {
                if (event.results[i].isFinal) {
                    finalTranscript += event.results[i][0].transcript;
                }
            }

            if (finalTranscript && !isTranslating) {
                const now = Date.now();
                if (now - lastTranslationTime > 1000) {
                    lastTranslationTime = now;
                    isTranslating = true;
                    
                    console.log(`üé§ Reconhecido: "${finalTranscript}"`);
                    
                    // ‚úÖ Traduz PARA O IDIOMA REMOTO (guardado)
                    translateText(finalTranscript).then(translation => {
                        if (translation && translation.trim() !== "") {
                            console.log(`üåê Traduzido: "${finalTranscript}" ‚Üí "${translation}"`);
                            enviarParaOutroCelular(translation);
                        } else {
                            console.log('‚ùå Tradu√ß√£o vazia ou falhou');
                        }
                        isTranslating = false;
                    }).catch(error => {
                        console.error('Erro na tradu√ß√£o:', error);
                        isTranslating = false;
                    });
                }
            }
        };
        
        recognition.onerror = function(event) {
            console.log('‚ùå Erro recognition:', event.error);
            stopRecording();
        };
        
        recognition.onend = function() {
            if (isRecording) {
                console.log('üîö Reconhecimento terminado automaticamente');
                stopRecording();
            }
        };
    }

    // ‚úÖ FUN√á√ÉO DE PERMISS√ÉO DO MICROFONE APENAS NO CLIQUE
    async function requestMicrophonePermissionOnClick() {
        try {
            console.log('üé§ Solicitando permiss√£o de microfone...');
            
            const stream = await navigator.mediaDevices.getUserMedia({ 
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    sampleRate: 44100
                }
            });
            
            // ‚úÖ PARA O STREAM IMEDIATAMENTE (s√≥ precisamos da permiss√£o)
            setTimeout(() => {
                stream.getTracks().forEach(track => track.stop());
            }, 100);
            
            microphonePermissionGranted = true;
            recordButton.disabled = false;
            setupRecognitionEvents();
            
            console.log('‚úÖ Microfone autorizado via clique');
            return true;
            
        } catch (error) {
            console.error('‚ùå Permiss√£o de microfone negada:', error);
            recordButton.disabled = true;
            
            // Mostra alerta para usu√°rio
            alert('Para usar o tradutor de voz, permita o acesso ao microfone quando solicitado.');
            return false;
        }
    }

    // ‚úÖ FUN√á√ÉO DE TRADU√á√ÉO SIMPLIFICADA
    async function translateText(text) {
        try {
            const trimmedText = text.trim().slice(0, 500);
            if (!trimmedText) {
                console.log('‚ö†Ô∏è Texto vazio para traduzir');
                return "";
            }
            
            console.log(`üåê Enviando para tradu√ß√£o: "${trimmedText.substring(0, 50)}..."`);
            
            const response = await fetch('https://chat-tradutor-bvvx.onrender.com/translate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    text: trimmedText, 
                    targetLang: window.meuIdiomaRemoto // ‚úÖ USA O GUARDADO
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            if (speakerButton) {
                speakerButton.disabled = false;
            }
            
            console.log(`‚úÖ Tradu√ß√£o recebida: ${result.translatedText || "VAZIO"}`);
            return result.translatedText || "";
            
        } catch (error) {
            console.error('‚ùå Erro na tradu√ß√£o:', error);
            return "";
        }
    }
    
    function speakText(text) {
        if (!SpeechSynthesis || !text) {
            console.log('‚ùå SpeechSynthesis n√£o dispon√≠vel ou texto vazio');
            return;
        }
        
        window.speechSynthesis.cancel();
        const utterance = new SpeechSynthesisUtterance(text);
        
        // ‚úÖ SEMPRE USA O IDIOMA REMOTO CORRETO
        utterance.lang = window.meuIdiomaRemoto || 'en-US';
        utterance.rate = 0.9;
        utterance.volume = 0.8;
        
        utterance.onstart = function() {
            isSpeechPlaying = true;
            if (speakerButton) speakerButton.textContent = '‚èπ';
            console.log('üîä Iniciando fala do texto');
        };
        
        utterance.onend = function() {
            isSpeechPlaying = false;
            if (speakerButton) speakerButton.textContent = 'üîä';
            console.log('üîä Fala terminada');
        };
        
        utterance.onerror = function(event) {
            isSpeechPlaying = false;
            if (speakerButton) speakerButton.textContent = 'üîä';
            console.error('‚ùå Erro na fala:', event.error);
        };
        
        window.speechSynthesis.speak(utterance);
    }
    
    function toggleSpeech() {
        if (!SpeechSynthesis) {
            console.log('‚ùå SpeechSynthesis n√£o suportado');
            return;
        }
        
        if (isSpeechPlaying) {
            window.speechSynthesis.cancel();
            isSpeechPlaying = false;
            if (speakerButton) speakerButton.textContent = 'üîä';
            console.log('‚èπ Fala cancelada');
        } else {
            // ‚úÖ CORRE√á√ÉO: L√™ apenas o texto recebido
            if (textoRecebido && textoRecebido.textContent) {
                const textToSpeak = textoRecebido.textContent.trim();
                if (textToSpeak !== "") {
                    console.log(`üîä Falando texto: "${textToSpeak.substring(0, 50)}..."`);
                    speakText(textToSpeak);
                } else {
                    console.log('‚ö†Ô∏è Nenhum texto para falar');
                }
            } else {
                console.log('‚ö†Ô∏è Elemento texto-recebido n√£o encontrado');
            }
        }
    }
    
    async function startRecording() {
        if (isRecording || isTranslating) {
            console.log('‚ö†Ô∏è J√° est√° gravando ou traduzindo');
            return;
        }
        
        try {
            // ‚úÖ SOLICITA PERMISS√ÉO APENAS NA PRIMEIRA VEZ
            if (!microphonePermissionGranted) {
                console.log('üé§ Primeira vez - solicitando permiss√£o...');
                const permitted = await requestMicrophonePermissionOnClick();
                if (!permitted) {
                    console.log('‚ùå Permiss√£o negada - parando grava√ß√£o');
                    return;
                }
            }
            
            recognition.start();
            isRecording = true;
            
            if (recordButton) recordButton.classList.add('recording');
            recordingStartTime = Date.now();
            updateTimer();
            timerInterval = setInterval(updateTimer, 1000);
            
            if (speakerButton) {
                speakerButton.disabled = true;
                speakerButton.textContent = 'üîá';
            }
            
            console.log('üé§ Grava√ß√£o iniciada');
            
        } catch (error) {
            console.error('‚ùå Erro ao iniciar grava√ß√£o:', error);
            stopRecording();
        }
    }
    
    function stopRecording() {
        if (!isRecording) {
            console.log('‚ö†Ô∏è N√£o estava gravando');
            return;
        }
        
        isRecording = false;
        if (recordButton) recordButton.classList.remove('recording');
        clearInterval(timerInterval);
        hideRecordingModal();
        
        console.log('‚èπÔ∏è Grava√ß√£o parada');
    }
    
    function showRecordingModal() {
        if (recordingModal) {
            recordingModal.classList.add('visible');
            console.log('üì± Modal de grava√ß√£o vis√≠vel');
        }
    }
    
    function hideRecordingModal() {
        if (recordingModal) {
            recordingModal.classList.remove('visible');
            console.log('üì± Modal de grava√ß√£o escondido');
        }
    }
    
    function updateTimer() {
        const elapsedSeconds = Math.floor((Date.now() - recordingStartTime) / 1000);
        const minutes = Math.floor(elapsedSeconds / 60);
        const seconds = elapsedSeconds % 60;
        
        if (recordingTimer) {
            recordingTimer.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }

        if (elapsedSeconds >= 30) {
            console.log('‚è∞ Tempo m√°ximo de grava√ß√£o atingido (30s)');
            stopRecording();
        }
    }

    // ===== EVENTOS =====
    if (recordButton) {
        recordButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            if (recordButton.disabled || isTranslating) {
                console.log('‚ö†Ô∏è Bot√£o desabilitado ou traduzindo');
                return;
            }
            
            if (!isRecording) {
                pressTimer = setTimeout(() => {
                    tapMode = false;
                    console.log('üëÜ Touch longo - iniciando grava√ß√£o');
                    startRecording();
                    showRecordingModal();
                }, 300);
            }
        });
        
        recordButton.addEventListener('touchend', function(e) {
            e.preventDefault();
            clearTimeout(pressTimer);
            
            if (isRecording) {
                console.log('üëÜ Touch solto - parando grava√ß√£o');
                stopRecording();
            } else {
                if (!isTranslating) {
                    tapMode = true;
                    console.log('üëÜ Touch r√°pido - iniciando grava√ß√£o');
                    startRecording();
                    showRecordingModal();
                }
            }
        });

        recordButton.addEventListener('click', function(e) {
            e.preventDefault();
            if (recordButton.disabled || isTranslating) {
                console.log('‚ö†Ô∏è Bot√£o desabilitado ou traduzindo');
                return;
            }
            
            if (isRecording) {
                console.log('üñ±Ô∏è Clique - parando grava√ß√£o');
                stopRecording();
            } else {
                console.log('üñ±Ô∏è Clique - iniciando grava√ß√£o');
                startRecording();
                showRecordingModal();
            }
        });
    }
    
    if (sendButton) {
        sendButton.addEventListener('click', function() {
            console.log('üì§ Bot√£o enviar - parando grava√ß√£o');
            stopRecording();
        });
    }
    
    if (speakerButton) {
        speakerButton.addEventListener('click', function() {
            console.log('üîä Bot√£o speaker - alternando fala');
            toggleSpeech();
        });
    }
    
    // ‚úÖ CONFIGURA√á√ÉO INICIAL SIMPLIFICADA
    console.log(`üéØ Tradutor completamente inicializado: ${window.meuIdiomaLocal} ‚Üí ${window.meuIdiomaRemoto}`);
    console.log('üîç Estado final:', {
        recordButton: !!recordButton,
        speakerButton: !!speakerButton,
        textoRecebido: !!textoRecebido,
        rtcCore: !!window.rtcCore,
        dataChannel: window.rtcCore ? window.rtcCore.dataChannel?.readyState : 'n√£o dispon√≠vel'
    });
    
    recordButton.disabled = false;
}

// ‚úÖ INICIALIZA√á√ÉO ROBUSTA COM VERIFICA√á√ÉO
function startTranslatorSafely() {
    console.log('üöÄ Iniciando tradutor com verifica√ß√£o de seguran√ßa...');
    
    // Verifica se o DOM est√° pronto
    if (document.readyState === 'loading') {
        console.log('‚è≥ DOM ainda carregando...');
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(initializeTranslator, 1000);
        });
    } else {
        console.log('‚úÖ DOM j√° carregado, iniciando tradutor...');
        setTimeout(initializeTranslator, 1000);
    }
}

// Inicia o tradutor de forma segura
startTranslatorSafely();
