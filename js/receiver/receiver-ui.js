// üéØ CONTROLE DO TOGGLE DAS INSTRU√á√ïES
function setupInstructionToggle() {
    const instructionBox = document.getElementById('instructionBox');
    const toggleButton = document.getElementById('instructionToggle');
    
    if (!instructionBox || !toggleButton) return;
    
    // Estado inicial: expandido
    let isExpanded = true;
    
    toggleButton.addEventListener('click', function(e) {
        e.stopPropagation(); // Impede que o clique propague para o box
        
        isExpanded = !isExpanded;
        
        if (isExpanded) {
            instructionBox.classList.remove('recolhido');
            instructionBox.classList.add('expandido');
            console.log('üìñ Instru√ß√µes expandidas');
        } else {
            instructionBox.classList.remove('expandido');
            instructionBox.classList.add('recolhido');
            console.log('üìñ Instru√ß√µes recolhidas');
        }
    });
    
    // Opcional: fechar ao clicar fora (se quiser)
    document.addEventListener('click', function(e) {
        if (!instructionBox.contains(e.target) && isExpanded) {
            instructionBox.classList.remove('expandido');
            instructionBox.classList.add('recolhido');
            isExpanded = false;
            console.log('üìñ Instru√ß√µes fechadas (clique fora)');
        }
    });
}

// Inicializa o toggle quando a p√°gina carregar
document.addEventListener('DOMContentLoaded', function() {
    setupInstructionToggle();
});

import { WebRTCCore } from '../../core/webrtc-core.js';
import { QRCodeGenerator } from '../qrcode/qr-code-utils.js';
import { CameraVigilante } from '../../core/camera-vigilante.js';

// üéµ VARI√ÅVEIS DE √ÅUDIO
let audioContext = null;
let somDigitacao = null;
let audioCarregado = false;
let permissaoConcedida = false;

// üé§ SISTEMA H√çBRIDO TTS AVAN√áADO
let primeiraFraseTTS = true;
let navegadorTTSPreparado = false;
let ultimoIdiomaTTS = 'pt-BR';

// üéµ CARREGAR SOM DE DIGITA√á√ÉO
function carregarSomDigitacao() {
    return new Promise((resolve) => {
        try {
            somDigitacao = new Audio('assets/audio/keyboard.mp3');
            somDigitacao.volume = 0.3;
            somDigitacao.preload = 'auto';
            
            somDigitacao.addEventListener('canplaythrough', () => {
                console.log('üéµ √Åudio de digita√ß√£o carregado');
                audioCarregado = true;
                resolve(true);
            });
            
            somDigitacao.addEventListener('error', () => {
                console.log('‚ùå Erro ao carregar √°udio');
                resolve(false);
            });
            
            somDigitacao.load();
            
        } catch (error) {
            console.log('‚ùå Erro no √°udio:', error);
            resolve(false);
        }
    });
}

// üéµ INICIAR LOOP DE DIGITA√á√ÉO
function iniciarSomDigitacao() {
    if (!audioCarregado || !somDigitacao) return;
    
    pararSomDigitacao();
    
    try {
        somDigitacao.loop = true;
        somDigitacao.currentTime = 0;
        somDigitacao.play().catch(error => {
            console.log('üîá Navegador bloqueou √°udio autom√°tico');
        });
        
        console.log('üéµ Som de digita√ß√£o iniciado');
    } catch (error) {
        console.log('‚ùå Erro ao tocar √°udio:', error);
    }
}

// üéµ PARAR SOM DE DIGITA√á√ÉO
function pararSomDigitacao() {
    if (somDigitacao) {
        try {
            somDigitacao.pause();
            somDigitacao.currentTime = 0;
            somDigitacao.loop = false;
            console.log('üéµ Som de digita√ß√£o parado');
        } catch (error) {
            console.log('‚ùå Erro ao parar √°udio:', error);
        }
    }
}

// üéµ INICIAR √ÅUDIO AP√ìS INTERA√á√ÉO DO USU√ÅRIO
function iniciarAudio() {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
    }
    
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    gainNode.gain.value = 0.001;
    oscillator.start();
    oscillator.stop(audioContext.currentTime + 0.1);
    
    console.log('üéµ √Åudio desbloqueado!');
}

// üé§ SOLICITAR TODAS AS PERMISS√ïES DE UMA VEZ
async function solicitarTodasPermissoes() {
    try {
        console.log('üéØ Solicitando todas as permiss√µes...');
        
        const stream = await navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true
        });
        
        console.log('‚úÖ Todas as permiss√µes concedidas!');
        
        stream.getTracks().forEach(track => track.stop());
        
        permissaoConcedida = true;
        window.permissoesConcedidas = true;
        window.audioContext = audioContext;
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro nas permiss√µes:', error);
        permissaoConcedida = false;
        window.permissoesConcedidas = false;
        throw error;
    }
}

// üéØ FUN√á√ÉO PARA OBTER IDIOMA COMPLETO
async function obterIdiomaCompleto(lang) {
    if (!lang) return 'pt-BR';
    if (lang.includes('-')) return lang;

    try {
        const response = await fetch('assets/bandeiras/language-flags.json');
        const flags = await response.json();
        const codigoCompleto = Object.keys(flags).find(key => key.startsWith(lang + '-'));
        return codigoCompleto || `${lang}-${lang.toUpperCase()}`;
    } catch (error) {
        console.error('Erro ao carregar JSON de bandeiras:', error);
        const fallback = {
            'pt': 'pt-BR', 'es': 'es-ES', 'en': 'en-US',
            'fr': 'fr-FR', 'de': 'de-DE', 'it': 'it-IT',
            'ja': 'ja-JP', 'zh': 'zh-CN', 'ru': 'ru-RU'
        };
        return fallback[lang] || 'en-US';
    }
}

// üåê Tradu√ß√£o apenas para texto
async function translateText(text, targetLang) {
    try {
        const response = await fetch('https://chat-tradutor-bvvx.onrender.com/translate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ text, targetLang })
        });

        const result = await response.json();
        return result.translatedText || text;
    } catch (error) {
        console.error('Erro na tradu√ß√£o:', error);
        return text;
    }
}

// üè≥Ô∏è Aplica bandeira do idioma local
async function aplicarBandeiraLocal(langCode) {
    try {
        const response = await fetch('assets/bandeiras/language-flags.json');
        const flags = await response.json();

        const bandeira = flags[langCode] || flags[langCode.split('-')[0]] || 'üî¥';

        // ‚úÖ‚úÖ‚úÖ SOLU√á√ÉO INTELIGENTE: Guardar o idioma original
        window.meuIdiomaLocal = langCode;
        console.log('üíæ Idioma local guardado:', window.meuIdiomaLocal);

        // ‚úÖ CORRE√á√ÉO: MESMA BANDEIRA NAS DUAS POSI√á√ïES
        const languageFlagElement = document.querySelector('.language-flag');
        if (languageFlagElement) languageFlagElement.textContent = bandeira;

        const localLangDisplay = document.querySelector('.local-Lang');
        if (localLangDisplay) localLangDisplay.textContent = bandeira;

        console.log('üè≥Ô∏è Bandeira local aplicada:', bandeira, 'em duas posi√ß√µes');

    } catch (error) {
        console.error('Erro ao carregar bandeira local:', error);
    }
}

// üè≥Ô∏è Aplica bandeira do idioma remota
async function aplicarBandeiraRemota(langCode) {
    try {
        const response = await fetch('assets/bandeiras/language-flags.json');
        const flags = await response.json();

        const bandeira = flags[langCode] || flags[langCode.split('-')[0]] || 'üî¥';

        // ‚úÖ‚úÖ‚úÖ SOLU√á√ÉO INTELIGENTE: Guardar o idioma REMOTO tamb√©m!
        window.meuIdiomaRemoto = langCode;
        console.log('üíæ Idioma REMOTO guardado:', window.meuIdiomaRemoto);

        const remoteLangElement = document.querySelector('.remoter-Lang');
        if (remoteLangElement) remoteLangElement.textContent = bandeira;

    } catch (error) {
        console.error('Erro ao carregar bandeira remota:', error);
        const remoteLangElement = document.querySelector('.remoter-Lang');
        if (remoteLangElement) remoteLangElement.textContent = 'üî¥';
    }
}

// ‚úÖ FUN√á√ÉO PARA LIBERAR INTERFACE (FALLBACK)
function liberarInterfaceFallback() {
    console.log('üîì Usando fallback para liberar interface...');
    
    // Remove tela de loading
    const loadingScreen = document.getElementById('loadingScreen');
    if (loadingScreen) {
        loadingScreen.style.display = 'none';
        console.log('‚úÖ Tela de loading removida');
    }
    
    // Mostra conte√∫do principal
    const elementosEscondidos = document.querySelectorAll('.hidden-until-ready');
    elementosEscondidos.forEach(elemento => {
        elemento.style.display = '';
    });
    
    console.log(`‚úÖ ${elementosEscondidos.length} elementos liberados`);
}

// üåê TRADU√á√ÉO DAS FRASES FIXAS (AGORA SEPARADA)
async function traduzirFrasesFixas() {
  try {
    // ‚úÖ‚úÖ‚úÖ AGORA USA O IDIOMA GUARDADO!
    const idiomaExato = window.meuIdiomaLocal || 'pt-BR';
    
    console.log(`üåê Traduzindo frases fixas para: ${idiomaExato}`);

    const frasesParaTraduzir = {
        "qr-modal-title": "This is your online key",
      "qr-modal-description": "You can ask to scan, share or print on your business card.",
      "translator-label": "Real-time translation.",      // ‚¨ÖÔ∏è PRIMEIRO ELEMENTO
  "translator-label-2": "Real-time translation.",   // ‚¨ÖÔ∏è SEGUNDO ELEMENTO (NOVO)
       "welcome-text": "Welcome! Let's begin.",
    "tap-qr": "Tap the QR code to start.",
  "quick-scan": "Ask to scan the QR.",
  "wait-connection": "Waiting for connection.",
  "both-connected": "Both online.",
  "drop-voice": "Speak clearly.",
  "check-replies": "Read the message.",
  "flip-cam": "Flip the camera. Share!"
    };

    for (const [id, texto] of Object.entries(frasesParaTraduzir)) {
      const el = document.getElementById(id);
      if (el) {
        const traduzido = await translateText(texto, idiomaExato);
        el.textContent = traduzido;
        console.log(`‚úÖ Traduzido: ${texto} ‚Üí ${traduzido}`);
      }
    }

    console.log('‚úÖ Frases fixas traduzidas com sucesso');

  } catch (error) {
    console.error("‚ùå Erro ao traduzir frases fixas:", error);
  }
}

// ‚úÖ FUN√á√ÉO PARA ESCONDER O BOT√ÉO CLICK QUANDO WEBRTC CONECTAR
function esconderClickQuandoConectar() {
    const elementoClick = document.getElementById('click');
    const remoteVideo = document.getElementById('remoteVideo');
    
    if (!elementoClick || !remoteVideo) return;
    
    // Observa mudan√ßas no remoteVideo para detectar conex√£o
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'srcObject') {
                if (remoteVideo.srcObject) {
                    // WebRTC conectou - esconde o bot√£o click DEFINITIVAMENTE
                    elementoClick.style.display = 'none';
                    elementoClick.classList.remove('piscar-suave');
                    console.log('üîó WebRTC conectado - bot√£o Click removido');
                    observer.disconnect(); // Para de observar
                }
            }
        });
    });
    
    // Come√ßa a observar o remoteVideo
    observer.observe(remoteVideo, {
        attributes: true,
        attributeFilter: ['srcObject']
    });
    
    console.log('üëÄ Observando conex√£o WebRTC para esconder bot√£o Click');
}

// üé§ SISTEMA H√çBRIDO TTS AVAN√áADO - SUBSTITUI√á√ÉO COMPLETA

// üé§ FUN√á√ÉO TTS DO NAVEGADOR (GR√ÅTIS) - OTIMIZADA
function falarComNavegadorTTS(mensagem, elemento, imagemImpaciente, idioma) {
    return new Promise((resolve) => {
        try {
            // Para qualquer fala anterior
            window.speechSynthesis.cancel();
            
            const utterance = new SpeechSynthesisUtterance(mensagem);
            utterance.lang = idioma;
            utterance.rate = 1.0;
            utterance.pitch = 1.0;
            utterance.volume = 0.9;
            
            // EVENTO: FALA COME√áOU
            utterance.onstart = () => {
                pararSomDigitacao();
                
                if (elemento) {
                    elemento.style.animation = 'none';
                    elemento.style.backgroundColor = '';
                    elemento.style.border = '';
                    elemento.textContent = mensagem;
                }
                if (imagemImpaciente) {
                    imagemImpaciente.style.display = 'none';
                }
                
                console.log(`üîä √Åudio Navegador TTS iniciado em ${idioma}`);
            };
            
            // EVENTO: FALA TERMINOU
            utterance.onend = () => {
                console.log('üîö √Åudio Navegador TTS terminado');
                if (imagemImpaciente) {
                    imagemImpaciente.style.display = 'none';
                }
                resolve(true);
            };
            
            // EVENTO: ERRO NA FALA
            utterance.onerror = (error) => {
                pararSomDigitacao();
                console.log('‚ùå Erro no √°udio Navegador TTS:', error);
                if (elemento) {
                    elemento.style.animation = 'none';
                    elemento.style.backgroundColor = '';
                    elemento.style.border = '';
                }
                if (imagemImpaciente) {
                    imagemImpaciente.style.display = 'none';
                }
                resolve(false);
            };
            
            window.speechSynthesis.speak(utterance);
            
        } catch (error) {
            console.error('‚ùå Erro no Navegador TTS:', error);
            resolve(false);
        }
    });
}

// üîÑ PREPARAR NAVEGADOR TTS EM SEGUNDO PLANO
function prepararNavegadorTTS(idioma) {
    if (navegadorTTSPreparado) return;
    
    try {
        // Fala silenciosa para carregar o motor de voz
        const utterance = new SpeechSynthesisUtterance('');
        utterance.lang = idioma;
        utterance.volume = 0; // Silencioso
        utterance.onend = () => {
            navegadorTTSPreparado = true;
            console.log(`‚úÖ Navegador TTS preparado para ${idioma}`);
        };
        window.speechSynthesis.speak(utterance);
    } catch (error) {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel preparar navegador TTS:', error);
    }
}

// üé§ FUN√á√ÉO GOOGLE TTS (PAGO) - ATUALIZADA
async function falarComGoogleTTS(mensagem, elemento, imagemImpaciente, idioma) {
    try {
        console.log(`üé§ Iniciando Google TTS para ${idioma}:`, mensagem.substring(0, 50) + '...');
        
        const resposta = await fetch('https://chat-tradutor.onrender.com/speak', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                text: mensagem,
                languageCode: idioma,
                gender: 'FEMALE'
            })
        });

        if (!resposta.ok) {
            throw new Error('Erro na API de voz');
        }

        const blob = await resposta.blob();
        const url = URL.createObjectURL(blob);
        const audio = new Audio(url);
        
        // EVENTO: √ÅUDIO COME√áOU
        audio.onplay = () => {
            pararSomDigitacao();
            
            if (elemento) {
                elemento.style.animation = 'none';
                elemento.style.backgroundColor = '';
                elemento.style.border = '';
                elemento.textContent = mensagem;
            }
            if (imagemImpaciente) {
                imagemImpaciente.style.display = 'none';
            }
            
            console.log(`üîä √Åudio Google TTS iniciado em ${idioma}`);
        };
        
        // EVENTO: √ÅUDIO TERMINOU
        audio.onended = () => {
            console.log('üîö √Åudio Google TTS terminado');
            if (imagemImpaciente) {
                imagemImpaciente.style.display = 'none';
            }
        };
        
        // EVENTO: ERRO NO √ÅUDIO
        audio.onerror = () => {
            pararSomDigitacao();
            console.log('‚ùå Erro no √°udio Google TTS');
            if (elemento) {
                elemento.style.animation = 'none';
                elemento.style.backgroundColor = '';
                elemento.style.border = '';
            }
            if (imagemImpaciente) {
                imagemImpaciente.style.display = 'none';
            }
        };

        await audio.play();
        
    } catch (error) {
        console.error('‚ùå Erro no Google TTS:', error);
        throw error; // Repassa o erro para o fallback
    }
}

// üéØ FUN√á√ÉO H√çBRIDA PRINCIPAL - SISTEMA AVAN√áADO
async function falarTextoSistemaHibrido(mensagem, elemento, imagemImpaciente, idioma) {
    try {
        console.log(`üéØ TTS H√≠brido: "${mensagem.substring(0, 50)}..." em ${idioma}`);
        
        // Atualiza √∫ltimo idioma usado
        ultimoIdiomaTTS = idioma;
        
        if (primeiraFraseTTS) {
            console.log('üöÄ PRIMEIRA FRASE: Usando Google TTS (r√°pido)');
            
            // ‚úÖ 1. PRIMEIRA FRASE: Google TTS (r√°pido)
            await falarComGoogleTTS(mensagem, elemento, imagemImpaciente, idioma);
            
            // ‚úÖ 2. PREPARA NAVEGADOR EM SEGUNDO PLANO
            console.log(`üîÑ Preparando navegador TTS para ${idioma}...`);
            prepararNavegadorTTS(idioma);
            
            primeiraFraseTTS = false;
            
        } else {
            console.log('üí∞ PR√ìXIMAS FRASES: Usando Navegador TTS (gr√°tis)');
            
            // ‚úÖ 3. PR√ìXIMAS FRASES: Navegador TTS (gr√°tis)
            const sucesso = await falarComNavegadorTTS(mensagem, elemento, imagemImpaciente, idioma);
            
            // ‚úÖ 4. FALLBACK: Se navegador falhar, volta para Google
            if (!sucesso) {
                console.log('üîÑ Fallback: Navegador falhou, usando Google TTS');
                await falarComGoogleTTS(mensagem, elemento, imagemImpaciente, idioma);
            }
        }
        
        console.log('‚úÖ TTS conclu√≠do com sucesso');
        
    } catch (error) {
        console.error('‚ùå Erro no sistema h√≠brido TTS:', error);
        
        // ‚úÖ FALLBACK FINAL: Tenta navegador como √∫ltima op√ß√£o
        console.log('üîÑ Tentando fallback final com navegador TTS...');
        await falarComNavegadorTTS(mensagem, elemento, imagemImpaciente, idioma);
    }
}

// ‚úÖ FUN√á√ÉO AUXILIAR PARA UUID (CORRIGIDA - FORA DA iniciarCameraAposPermissoes)
function fakeRandomUUID(fixedValue) {
    return {
        substr: function(start, length) {
            return fixedValue.substr(start, length);
        }
    };
}

// ‚úÖ NOVO BLOCO - C√ÇMERA RESILIENTE
async function iniciarCameraAposPermissoes() {
    try {
        console.log('üé• Tentando iniciar c√¢mera (modo resiliente)...');
        
        // ‚úÖ TENTA a c√¢mera, mas N√ÉO TRAVA se falhar
        const stream = await navigator.mediaDevices.getUserMedia({
            video: {
                width: { ideal: 1280 },
                height: { ideal: 720 }
            },
            audio: false
        }).catch(error => {
            console.log('‚ö†Ô∏è C√¢mera indispon√≠vel, continuando sem v√≠deo...', error);
            return null; // ‚¨ÖÔ∏è RETORNA NULL EM VEZ DE THROW ERROR
        });

        // ‚úÖ SE C√ÇMERA FUNCIONOU: Configura normalmente
        if (stream) {
            window.localStream = stream;

            const localVideo = document.getElementById('localVideo');
            if (localVideo) {
                localVideo.srcObject = stream;
            }

            // üÜï VIGILANTE UNIVERSAL SIMPLES (SUBSTITUI TODO O SISTEMA ANTIGO)
            window.cameraVigilante = new CameraVigilante();
            window.cameraVigilante.configurarBotaoToggle('toggleCamera');
            window.cameraVigilante.iniciarMonitoramento();
            
            console.log('‚úÖ C√¢mera iniciada + Vigilante Universal ativado');
            
        } else {
            // ‚úÖ SE C√ÇMERA FALHOU: Apenas avisa, mas continua
            console.log('‚ÑπÔ∏è Sistema operando em modo √°udio/texto (sem c√¢mera)');
            window.localStream = null;
        }

        // ‚úÖ‚úÖ‚úÖ REMOVE LOADING INDEPENDENTE DA C√ÇMERA
        const mobileLoading = document.getElementById('mobileLoading');
        if (mobileLoading) {
            mobileLoading.style.display = 'none';
        }

        // ‚úÖ‚úÖ‚úÖ MOSTRA BOT√ÉO CLICK INDEPENDENTE DA C√ÇMERA
        setTimeout(() => {
            const elementoClick = document.getElementById('click');
            if (elementoClick) {
                elementoClick.style.display = 'block';
                elementoClick.classList.add('piscar-suave');
                console.log('üü° Bot√£o click ativado (com/sem c√¢mera)');
            }
        }, 500);
        
        window.rtcCore = new WebRTCCore();

        const url = window.location.href;
        const fixedId = url.split('?')[1] || crypto.randomUUID().substr(0, 8);

        const myId = fakeRandomUUID(fixedId).substr(0, 8);

        const params = new URLSearchParams(window.location.search);
        const token = params.get('token') || '';
        const lang = params.get('lang') || navigator.language || 'pt-BR';

        window.targetTranslationLang = lang;

        // ‚úÖ GUARDA as informa√ß√µes para gerar QR Code depois (QUANDO O USU√ÅRIO CLICAR)
        const raw = window.location.search;
const parts = raw.substring(1).split('&');
window.qrCodeData = {
    myId: parts[0],
    token: new URLSearchParams(raw).get('token'),
    lang: new URLSearchParams(raw).get('lang')
};

    // ‚úÖ CONFIGURA o bot√£o para gerar QR Code quando clicado (VERS√ÉO COM LINK)
    document.getElementById('logo-traduz').addEventListener('click', function() {
       
        // ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è SEU C√ìDIGO ORIGINAL CONTINUA DAQUI ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
        
        // üîÑ VERIFICA SE J√Å EXISTE UM QR CODE ATIVO
        const overlay = document.querySelector('.info-overlay');
        const qrcodeContainer = document.getElementById('qrcode');
        
        // Se o overlay j√° est√° vis√≠vel, apenas oculta (toggle)
        if (overlay && !overlay.classList.contains('hidden')) {
            overlay.classList.add('hidden');
            console.log('üì± QR Code fechado pelo usu√°rio');
            return;
        }
        
        // üîÑ VERIFICA CONEX√ÉO WEBRTC DE FORMA MAIS INTELIGENTE
        const remoteVideo = document.getElementById('remoteVideo');
        const isConnected = remoteVideo && remoteVideo.srcObject;
        
        if (isConnected) {
            console.log('‚ùå WebRTC j√° conectado - QR Code n√£o pode ser reaberto');
            return; // ‚¨ÖÔ∏è Apenas retorna silenciosamente
        }
        
        console.log('üóùÔ∏è Gerando/Reabrindo QR Code e Link...');
               
        // üîÑ LIMPA QR CODE ANTERIOR SE EXISTIR
        if (qrcodeContainer) {
            qrcodeContainer.innerHTML = '';
        }
        
        const callerUrl = `${window.location.origin}/receiver.html?${window.qrCodeData.myId}&token=${encodeURIComponent(window.qrCodeData.token)}&lang=${encodeURIComponent(window.qrCodeData.lang)}`;       
        
        // Gera o QR Code
        QRCodeGenerator.generate("qrcode", callerUrl);
        
        // üÜï üÜï üÜï CONFIGURA BOT√ÉO COPIAR SIMPLES
        const btnCopiar = document.getElementById('copiarLink');
        if (btnCopiar) {
            btnCopiar.onclick = function() {
                navigator.clipboard.writeText(callerUrl).then(() => {
                    btnCopiar.textContent = '‚úÖ';
                    btnCopiar.classList.add('copiado');
                    console.log('üîó Link copiado para √°rea de transfer√™ncia');
                    
                    setTimeout(() => {
                        btnCopiar.textContent = 'üîó';
                        btnCopiar.classList.remove('copiado');
                    }, 2000);
                }).catch(err => {
                    console.log('‚ùå Erro ao copiar link:', err);
                    // Fallback para dispositivos sem clipboard API
                    const textArea = document.createElement('textarea');
                    textArea.value = callerUrl;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    
                    btnCopiar.textContent = '‚úÖ';
                    setTimeout(() => {
                        btnCopiar.textContent = 'üîó';
                    }, 2000);
                });
            };
        }
        
        // Mostra o overlay do QR Code
        if (overlay) {
            overlay.classList.remove('hidden');
        }
        
        console.log('‚úÖ QR Code e Link gerados/reativados!');
    });

        // Fechar QR Code ao clicar fora
        document.querySelector('.info-overlay').addEventListener('click', function(e) {
            if (e.target === this) {
                this.classList.add('hidden');
                console.log('üì± QR Code fechado (clique fora)');
            }
        });

        window.rtcCore.initialize(myId);
        window.rtcCore.setupSocketHandlers();

        // üé§ SISTEMA H√çBRIDO TTS - CALLBACK ATUALIZADO
        window.rtcCore.setDataChannelCallback(async (mensagem) => {
            iniciarSomDigitacao();

            console.log('üì© Mensagem recebida:', mensagem);

            const elemento = document.getElementById('texto-recebido');
            const imagemImpaciente = document.getElementById('lemurFixed');
            
            if (elemento) {
                elemento.textContent = "";
                elemento.style.opacity = '1';
                elemento.style.transition = 'opacity 0.5s ease';
                
                elemento.style.animation = 'pulsar-flutuar-intenso 0.8s infinite ease-in-out';
                elemento.style.backgroundColor = 'rgba(255, 0, 0, 0.3)';
                elemento.style.border = '2px solid #ff0000';
            }

            if (imagemImpaciente) {
                imagemImpaciente.style.display = 'block';
            }

            // ‚úÖ‚úÖ‚úÖ SOLU√á√ÉO DEFINITIVA: Usar o idioma GUARDADO
            const idiomaExato = window.meuIdiomaLocal || 'pt-BR';
            
            console.log(`üéØ TTS Receiver: Idioma guardado = ${idiomaExato}`);
            
            // üé§ CHAMADA CORRETA: Usa o idioma que J√Å FOI GUARDADO
            await falarTextoSistemaHibrido(mensagem, elemento, imagemImpaciente, idiomaExato);
        });

        window.rtcCore.onIncomingCall = (offer, idiomaDoCaller) => {
            // ‚úÖ‚úÖ‚úÖ REMOVEMOS a verifica√ß√£o "if (!localStream) return;"
            // AGORA aceita chamadas mesmo sem c√¢mera!
            
            console.log('üìû Chamada recebida - Com/Sem c√¢mera');

            console.log('üéØ Caller fala:', idiomaDoCaller);
            
            // [Sistema de espera removido - conex√£o estabelecida]

            console.log('üéØ Eu (receiver) entendo:', lang);

            window.sourceTranslationLang = idiomaDoCaller;
            window.targetTranslationLang = lang;

            console.log('üéØ Vou traduzir:', idiomaDoCaller, '‚Üí', lang);

            window.rtcCore.handleIncomingCall(offer, window.localStream, (remoteStream) => {
                remoteStream.getAudioTracks().forEach(track => track.enabled = false);

                const overlay = document.querySelector('.info-overlay');
                if (overlay) overlay.classList.add('hidden');

                const remoteVideo = document.getElementById('remoteVideo');
                if (remoteVideo) {
                    remoteVideo.srcObject = remoteStream;
                    
                    // ‚úÖ AGORA SIM: Esconde o bot√£o Click quando WebRTC conectar
                    const elementoClick = document.getElementById('click');
                    if (elementoClick) {
                        elementoClick.style.display = 'none';
                        elementoClick.classList.remove('piscar-suave');
                        console.log('üîó WebRTC conectado - bot√£o Click removido permanentemente');
                    }
                }

                window.targetTranslationLang = idiomaDoCaller || lang;
                console.log('üéØ Idioma definido para tradu√ß√£o:', window.targetTranslationLang);

                if (idiomaDoCaller) {
                    aplicarBandeiraRemota(idiomaDoCaller);
                } else {
                    const remoteLangElement = document.querySelector('.remoter-Lang');
                    if (remoteLangElement) remoteLangElement.textContent = 'üî¥';
                }
            });
        };

        const frasesParaTraduzir = {
            "translator-label": "Real-time translation.",
            "qr-modal-title": "This is your online key",
            "qr-modal-description": "You can ask to scan, share or print on your business card."
        };

        (async () => {
            for (const [id, texto] of Object.entries(frasesParaTraduzir)) {
                const el = document.getElementById(id);
                if (el) {
                    const traduzido = await translateText(texto, lang);
                    el.textContent = traduzido;
                }
            }
        })();

        aplicarBandeiraLocal(lang);

        setTimeout(() => {
            if (typeof initializeTranslator === 'function') {
                initializeTranslator();
            }
        }, 1000);

        // ‚úÖ INICIA O OBSERVADOR PARA ESCONDER O CLICK QUANDO CONECTAR
        esconderClickQuandoConectar();

    } catch (error) {
        // ‚úÖ‚úÖ‚úÖ EM CASO DE ERRO: Remove loading E continua
        console.error("‚ùå Erro n√£o cr√≠tico na c√¢mera:", error);
        
        const mobileLoading = document.getElementById('mobileLoading');
        if (mobileLoading) {
            mobileLoading.style.display = 'none';
        }
        
        // ‚úÖ N√ÉO FAZ throw error! Apenas retorna normalmente
        console.log('üü° Sistema continua funcionando (√°udio/texto)');
    }
}

// üöÄ INICIALIZA√á√ÉO AUTOM√ÅTICA (SEM BOT√ÉO DE PERMISS√ïES)
window.onload = async () => {
    try {
        console.log('üöÄ Iniciando aplica√ß√£o receiver automaticamente...');
        
        // 1. Obt√©m o idioma para tradu√ß√£o
        const params = new URLSearchParams(window.location.search);
        const lang = params.get('lang') || navigator.language || 'pt-BR';
        
        // ‚úÖ‚úÖ‚úÖ PRIMEIRO: Aplica bandeira e GUARDA o idioma
        await aplicarBandeiraLocal(lang);

        // ‚úÖ‚úÖ‚úÖ DEPOIS: Traduz frases com o idioma J√Å GUARDADO  
        await traduzirFrasesFixas();
        
        // 3. Inicia √°udio
        iniciarAudio();
        
        // 4. Carrega sons da m√°quina de escrever
        await carregarSomDigitacao();
        
        // 5. Solicita TODAS as permiss√µes (c√¢mera + microfone)
        await solicitarTodasPermissoes();
        
        // 6. Libera interface
        if (typeof window.liberarInterface === 'function') {
            window.liberarInterface();
            console.log('‚úÖ Interface liberada via fun√ß√£o global');
        } else {
            liberarInterfaceFallback();
            console.log('‚úÖ Interface liberada via fallback');
        }
        
        // 7. Inicia c√¢mera e WebRTC
        await iniciarCameraAposPermissoes();
        
        console.log('‚úÖ Receiver iniciado com sucesso!');
        
    } catch (error) {
        console.error('‚ùå Erro ao inicializar receiver:', error);
        
        if (typeof window.mostrarErroCarregamento === 'function') {
            window.mostrarErroCarregamento('Erro ao solicitar permiss√µes de c√¢mera e microfone');
        } else {
            console.error('‚ùå Erro no carregamento:', error);
            alert('Erro ao inicializar: ' + error.message);
        }
    }
};
