// üîîüîîüîî FUN√á√ÉO ATUALIZADA: Notifica√ß√£o SIMPLES igual ao servidor
async function enviarNotificacaoWakeUp(receiverToken, receiverId, meuId) {
  try {
    console.log('üîî Enviando notifica√ß√£o SIMPLES para acordar receiver...');
    
    const response = await fetch('https://serve-app-e9ia.onrender.com/send-notification', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        token: receiverToken,
        title: 'üìû Nova Chamada',
        body: `Toque para atender a chamada`, // ‚úÖ CORPO SIMPLES IGUAL AO SERVIDOR
        // ‚úÖ DADOS SIMPLES: APENAS O NECESS√ÅRIO
        data: {
          type: 'wake_up' // ‚úÖ MESMO TIPO QUE O SERVIDOR ESPERA
          // ‚ùå REMOVIDO: callerId, callerLang, targetLang, receiverId
        }
      })
    });

    const result = await response.json();
    console.log('‚úÖ Notifica√ß√£o SIMPLES enviada:', result);
    return result.success;
  } catch (error) {
    console.error('‚ùå Erro ao enviar notifica√ß√£o:', error);
    return false;
  }
}

// üîÑ FUN√á√ÉO ATUALIZADA: Tentar fluxo de notifica√ß√£o SIMPLES
async function tentarFluxoNotificacaoSimples(receiverToken, receiverId, meuId) {
  console.log('üìû Iniciando fluxo de notifica√ß√£o SIMPLES...');
  
  // ‚úÖ‚úÖ‚úÖ ENVIA APENAS NOTIFICA√á√ÉO SIMPLES "ACORDAR" (IGUAL AO SERVIDOR)
  const notificacaoEnviada = await enviarNotificacaoWakeUp(
    receiverToken, 
    receiverId, 
    meuId
  );
  
  if (notificacaoEnviada) {
    mostrarEstadoAguardando();
    iniciarEscutaConexaoReversa(receiverId, meuId);
  } else {
    alert('‚ùå N√£o foi poss√≠vel notificar o receptor. Tente novamente.');
  }
}
