// üéØ VIGIA DE C√ÇMERA INTELIGENTE - ENTENDE RELA√á√ÉO LOCAL/REMOTO
class CameraVigilante {
    constructor() {
        this.estaMonitorando = false;
        this.intervaloMonitoramento = null;
        this.ultimoFrameLocal = null;
        this.ultimoFrameRemoto = null;
        this.tentativasRecuperacao = 0;
        this.maxTentativas = 3;
        this.meuId = this.obterMeuId();
        
        console.log('üëÅÔ∏è Vigia INTELIGENTE inicializado - ID:', this.meuId);
    }

    // üîç OBTER IDENTIFICA√á√ÉO DO DISPOSITIVO
    obterMeuId() {
        // Tenta obter da URL ou gera um ID √∫nico
        const params = new URLSearchParams(window.location.search);
        return params.toString().split('&')[0] || 'device-' + Math.random().toString(36).substr(2, 9);
    }

    // üéØ INICIAR MONITORAMENTO INTELIGENTE
    iniciarMonitoramento() {
        if (this.estaMonitorando) return;

        console.log('üëÅÔ∏è Iniciando monitoramento INTELIGENTE...');
        this.estaMonitorando = true;
        this.ultimoFrameLocal = Date.now();
        this.ultimoFrameRemoto = Date.now();

        this.observarVideoLocal();
        this.observarVideoRemoto();
        
        this.intervaloMonitoramento = setInterval(() => {
            this.verificarSaudeInteligente();
        }, 5000);

        console.log('‚úÖ Vigia INTELIGENTE ativado');
    }

    // üëÅÔ∏è OBSERVAR V√çDEO LOCAL
    observarVideoLocal() {
        const localVideo = document.getElementById('localVideo');
        if (!localVideo) return;

        localVideo.addEventListener('timeupdate', () => {
            this.ultimoFrameLocal = Date.now();
        });

        localVideo.addEventListener('error', (error) => {
            console.log('‚ùå Erro no V√çDEO LOCAL (MINHA c√¢mera):', error);
            this.analisarProblema('local_error', error);
        });

        console.log('üëÄ Vigia observando MINHA c√¢mera local');
    }

    // üëÅÔ∏è OBSERVAR V√çDEO REMOTO
    observarVideoRemoto() {
        const remoteVideo = document.getElementById('remoteVideo');
        if (!remoteVideo) return;

        remoteVideo.addEventListener('timeupdate', () => {
            this.ultimoFrameRemoto = Date.now();
        });

        remoteVideo.addEventListener('error', (error) => {
            console.log('‚ùå Erro no V√çDEO REMOTO (C√ÇMERA DO OUTRO):', error);
            this.analisarProblema('remoto_error', error);
        });

        console.log('üëÄ Vigia observando C√ÇMERA DO OUTRO usu√°rio');
    }

    // üß† AN√ÅLISE INTELIGENTE DO PROBLEMA
    analisarProblema(tipo, error) {
        console.log(`üîç Analisando problema: ${tipo}`);
        
        switch(tipo) {
            case 'local_error':
                // ‚ùå PROBLEMA NA MINHA C√ÇMERA - EU RESOLVO
                console.log('üö® MINHA c√¢mera com problema - recuperando...');
                this.tentarRecuperarMinhaCamera();
                break;
                
            case 'remoto_error':
                // ‚ùå PROBLEMA NA C√ÇMERA DO OUTRO - NOTIFICO ELE
                console.log('üö® C√ÇMERA DO OUTRO com problema - notificando...');
                this.notificarOutroUsuario('sua_camera_com_problema');
                break;
        }
    }

    // ‚ö° VERIFICA√á√ÉO INTELIGENTE DA SA√öDE
    verificarSaudeInteligente() {
        if (!this.estaMonitorando) return;

        const agora = Date.now();
        const tempoSemFramesLocal = agora - this.ultimoFrameLocal;
        const tempoSemFramesRemoto = agora - this.ultimoFrameRemoto;
        
        // üö® MINHA C√ÇMERA TRAVOU
        if (tempoSemFramesLocal > 10000) {
            console.log('üö® MINHA c√¢mera travou - recuperando...');
            this.tentarRecuperarMinhaCamera();
            return;
        }

        // üö® C√ÇMERA DO OUTRO TRAVOU
        if (tempoSemFramesRemoto > 15000) {
            console.log('üö® C√ÇMERA DO OUTRO travou - notificando...');
            this.notificarOutroUsuario('sua_camera_travou');
            return;
        }

        console.log('‚úÖ Ambas c√¢meras OK - Minha:', tempoSemFramesLocal + 'ms', 'Outro:', tempoSemFramesRemoto + 'ms');
    }

    // üîß RECUPERAR MINHA C√ÇMERA (EU MESMO RESOLVO)
    async tentarRecuperarMinhaCamera() {
        if (this.tentativasRecuperacao >= this.maxTentativas) {
            console.log('‚ùå M√°ximo de tentativas para MINHA c√¢mera');
            this.notificarOutroUsuario('minha_camera_indisponivel');
            return;
        }

        this.tentativasRecuperacao++;
        console.log(`üîÑ Tentativa ${this.tentativasRecuperacao} para MINHA c√¢mera`);

        try {
            // üõë PARA MINHA STREAM
            if (window.localStream) {
                window.localStream.getTracks().forEach(track => track.stop());
                window.localStream = null;
            }

            await new Promise(resolve => setTimeout(resolve, 1000));

            // üìπ RECUPERA MINHA C√ÇMERA
            const novaStream = await navigator.mediaDevices.getUserMedia({
                video: { 
                    facingMode: 'user',
                    width: { ideal: 1280 },
                    height: { ideal: 720 }
                },
                audio: false
            });

            // üé• ATUALIZA MEU V√çDEO LOCAL
            const localVideo = document.getElementById('localVideo');
            if (localVideo) {
                localVideo.srcObject = novaStream;
            }

            // üîÑ ATUALIZA MINHA STREAM
            window.localStream = novaStream;

            // üì° ATUALIZA WEBRTC (PARA O OUTRO USU√ÅRIO ME VER)
            this.atualizarWebRTC(novaStream);

            // ‚úÖ NOTIFICA SUCESSO
            this.ultimoFrameLocal = Date.now();
            this.tentativasRecuperacao = 0;
            
            console.log('‚úÖ MINHA c√¢mera recuperada!');
            this.notificarOutroUsuario('minha_camera_recuperada');

        } catch (error) {
            console.log('‚ùå Falha ao recuperar MINHA c√¢mera:', error);
            this.notificarOutroUsuario('minha_camera_falhou');
        }
    }

    // üì° NOTIFICAR OUTRO USU√ÅRIO SOBRE STATUS DA C√ÇMERA
    notificarOutroUsuario(mensagem) {
        if (window.rtcCore && window.rtcCore.dataChannel) {
            try {
                const notificacao = {
                    type: 'camera_status',
                    message: mensagem,
                    from: this.meuId,
                    timestamp: Date.now()
                };
                
                window.rtcCore.dataChannel.send(JSON.stringify(notificacao));
                console.log('üì¢ Notificando outro usu√°rio:', mensagem);
                
            } catch (error) {
                console.log('‚ùå N√£o foi poss√≠vel notificar outro usu√°rio:', error);
            }
        }
    }

    // üéØ CONFIGURAR RECEBIMENTO DE NOTIFICA√á√ïES
    configurarReceptorNotificacoes() {
        if (window.rtcCore && window.rtcCore.dataChannel) {
            window.rtcCore.dataChannel.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    if (data.type === 'camera_status') {
                        this.processarNotificacaoCamera(data);
                    }
                } catch (error) {
                    // N√£o √© JSON, ignora
                }
            };
        }
    }

    // üì® PROCESSAR NOTIFICA√á√ïES DO OUTRO USU√ÅRIO
    processarNotificacaoCamera(data) {
        console.log('üì® Notifica√ß√£o do outro usu√°rio:', data.message);
        
        switch(data.message) {
            case 'sua_camera_com_problema':
                console.log('‚ö†Ô∏è O OUTRO usu√°rio diz que MINHA c√¢mera tem problema');
                // Pode tentar recupera√ß√£o autom√°tica ou mostrar aviso
                break;
                
            case 'sua_camera_travou':
                console.log('‚ö†Ô∏è O OUTRO usu√°rio diz que MINHA c√¢mera travou');
                this.tentarRecuperarMinhaCamera();
                break;
                
            case 'minha_camera_recuperada':
                console.log('‚úÖ O OUTRO usu√°rio recuperou a c√¢mera DELE');
                break;
                
            case 'minha_camera_indisponivel':
                console.log('‚ùå O OUTRO usu√°rio n√£o conseguiu recuperar a c√¢mera');
                break;
        }
    }

    // üì° ATUALIZAR WEBRTC (MESMA L√ìGICA)
    atualizarWebRTC(novaStream) {
        if (window.rtcCore && window.rtcCore.peer && window.rtcCore.peer.connectionState === 'connected') {
            try {
                window.rtcCore.localStream = novaStream;
                const newVideoTrack = novaStream.getVideoTracks()[0];
                const senders = window.rtcCore.peer.getSenders();
                
                for (const sender of senders) {
                    if (sender.track && sender.track.kind === 'video') {
                        sender.replaceTrack(newVideoTrack);
                        console.log('‚úÖ WebRTC atualizado - outro usu√°rio ver√° minha nova c√¢mera');
                        break;
                    }
                }
            } catch (error) {
                console.error('‚ùå Erro ao atualizar WebRTC:', error);
            }
        }
    }

    // üéØ INICIAR VIGIL√ÇNCIA COMPLETA
    iniciarVigilanciaCompleta() {
        this.iniciarMonitoramento();
        this.configurarReceptorNotificacoes();
        console.log('üõ°Ô∏è Vigil√¢ncia completa ativada - monitoramento + notifica√ß√µes');
    }

    // üõë PARAR MONITORAMENTO
    pararMonitoramento() {
        if (this.intervaloMonitoramento) {
            clearInterval(this.intervaloMonitoramento);
        }
        this.estaMonitorando = false;
        console.log('üõë Vigia INTELIGENTE pausado');
    }

    destruir() {
        this.pararMonitoramento();
        console.log('üßπ Vigia INTELIGENTE finalizado');
    }
}

export { CameraVigilante };
