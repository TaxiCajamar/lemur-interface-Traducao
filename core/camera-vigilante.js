// üéØ VIGIA DE C√ÇMERA BILATERAL - PARA RECEIVER, CALLER E NOTIFICADOR
// üìç Localiza√ß√£o: core/camera-vigilante.js

class CameraVigilante {
    constructor() {
        this.estaMonitorando = false;
        this.intervaloMonitoramento = null;
        this.ultimoFrameTimeLocal = null;
        this.ultimoFrameTimeRemoto = null;
        this.tentativasRecuperacaoLocal = 0;
        this.tentativasRecuperacaoRemoto = 0;
        this.maxTentativas = 3;
        
        // üîç ESTADO DAS C√ÇMERAS
        this.estadoCameras = {
            local: 'ativa', // 'ativa', 'congelada', 'erro', 'inativa'
            remota: 'ativa'
        };
        
        console.log('üëÅÔ∏è Vigia de C√¢mera Bilateral inicializado');
    }

    // üéØ INICIAR MONITORAMENTO BILATERAL
    iniciarMonitoramento() {
        if (this.estaMonitorando) {
            console.log('üëÅÔ∏è Vigia j√° est√° monitorando');
            return;
        }

        console.log('üëÅÔ∏è Iniciando monitoramento bilateral das c√¢meras...');
        this.estaMonitorando = true;
        this.ultimoFrameTimeLocal = Date.now();
        this.ultimoFrameTimeRemoto = Date.now();

        // üëÅÔ∏è OBSERVA AMBAS AS C√ÇMERAS
        this.observarCameraLocal();
        this.observarCameraRemota();
        
        // ‚ö° VERIFICA√á√ÉO PERI√ìDICA BILATERAL
        this.intervaloMonitoramento = setInterval(() => {
            this.verificarSaudeCameras();
        }, 5000);

        console.log('‚úÖ Vigia bilateral ativado');
    }

    // üëÅÔ∏è OBSERVAR C√ÇMERA LOCAL
    observarCameraLocal() {
        const localVideo = document.getElementById('localVideo');
        if (!localVideo) {
            console.log('‚ö†Ô∏è Elemento localVideo n√£o encontrado');
            this.estadoCameras.local = 'inativa';
            return;
        }

        localVideo.addEventListener('timeupdate', () => {
            this.ultimoFrameTimeLocal = Date.now();
            this.estadoCameras.local = 'ativa';
        });

        localVideo.addEventListener('error', (error) => {
            console.log('‚ùå Erro na c√¢mera local:', error);
            this.estadoCameras.local = 'erro';
            this.tentarRecuperarCameraLocal('erro_no_video');
        });

        console.log('üëÄ Vigia observando c√¢mera local');
    }

    // üëÅÔ∏è OBSERVAR C√ÇMERA REMOTA
    observarCameraRemota() {
        const remoteVideo = document.getElementById('remoteVideo');
        if (!remoteVideo) {
            console.log('‚ö†Ô∏è Elemento remoteVideo n√£o encontrado');
            this.estadoCameras.remota = 'inativa';
            return;
        }

        remoteVideo.addEventListener('timeupdate', () => {
            this.ultimoFrameTimeRemoto = Date.now();
            this.estadoCameras.remota = 'ativa';
        });

        remoteVideo.addEventListener('error', (error) => {
            console.log('‚ùå Erro na c√¢mera remota:', error);
            this.estadoCameras.remota = 'erro';
            this.notificarProblemaRemoto('erro_remoto');
        });

        // üîç DETECTA SE O V√çDEO REMOTO EST√Å VIS√çVEL
        this.observarVisibilidadeRemota();

        console.log('üëÄ Vigia observando c√¢mera remota');
    }

    // üîç OBSERVAR VISIBILIDADE DA C√ÇMERA REMOTA
    observarVisibilidadeRemota() {
        const remoteVideo = document.getElementById('remoteVideo');
        if (!remoteVideo) return;

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (!entry.isIntersecting) {
                    console.log('‚ö†Ô∏è C√¢mera remota n√£o est√° vis√≠vel na tela');
                    this.notificarProblemaRemoto('nao_visivel');
                }
            });
        }, { threshold: 0.1 });

        observer.observe(remoteVideo);
    }

    // ‚ö° VERIFICAR SA√öDE DE AMBAS AS C√ÇMERAS
    verificarSaudeCameras() {
        if (!this.estaMonitorando) return;

        const agora = Date.now();
        
        // üé• VERIFICA C√ÇMERA LOCAL
        const tempoSemFramesLocal = agora - this.ultimoFrameTimeLocal;
        if (tempoSemFramesLocal > 10000 && this.estadoCameras.local === 'ativa') {
            console.log('üö® C√¢mera LOCAL congelada - sem frames h√°', tempoSemFramesLocal + 'ms');
            this.estadoCameras.local = 'congelada';
            this.tentarRecuperarCameraLocal('congelada');
        }

        // üì° VERIFICA C√ÇMERA REMOTA
        const tempoSemFramesRemoto = agora - this.ultimoFrameTimeRemoto;
        if (tempoSemFramesRemoto > 15000 && this.estadoCameras.remota === 'ativa') {
            console.log('üö® C√¢mera REMOTA congelada - sem frames h√°', tempoSemFramesRemoto + 'ms');
            this.estadoCameras.remota = 'congelada';
            this.notificarProblemaRemoto('congelada_remota');
        }

        // ‚úÖ VERIFICA STREAMS ATIVAS
        this.verificarStreamsAtivas();

        console.log(`üìä Status: Local=${this.estadoCameras.local}, Remota=${this.estadoCameras.remota}`);
    }

    // üîÑ VERIFICAR STREAMS ATIVAS
    verificarStreamsAtivas() {
        // üé• VERIFICA STREAM LOCAL
        if (window.localStream) {
            const videoTrackLocal = window.localStream.getVideoTracks()[0];
            if (videoTrackLocal) {
                if (videoTrackLocal.readyState === 'ended') {
                    console.log('üö® Track de v√≠deo LOCAL terminou');
                    this.estadoCameras.local = 'erro';
                    this.tentarRecuperarCameraLocal('track_terminada');
                }
            } else {
                console.log('üö® Nenhuma track de v√≠deo LOCAL encontrada');
                this.estadoCameras.local = 'inativa';
            }
        }

        // üì° VERIFICA STREAM REMOTA (se dispon√≠vel)
        if (window.remoteStream) {
            const videoTrackRemoto = window.remoteStream.getVideoTracks()[0];
            if (videoTrackRemoto && videoTrackRemoto.readyState === 'ended') {
                console.log('üö® Track de v√≠deo REMOTA terminou');
                this.estadoCameras.remota = 'erro';
                this.notificarProblemaRemoto('track_remota_terminada');
            }
        }
    }

    // üîÑ TENTAR RECUPERAR C√ÇMERA LOCAL
    async tentarRecuperarCameraLocal(motivo) {
        if (this.tentativasRecuperacaoLocal >= this.maxTentativas) {
            console.log('‚ùå M√°ximo de tentativas de recupera√ß√£o LOCAL atingido');
            this.mostrarAvisoFinal('local');
            return;
        }

        this.tentativasRecuperacaoLocal++;
        console.log(`üîÑ Tentativa LOCAL ${this.tentativasRecuperacaoLocal}/${this.maxTentativas} - Motivo: ${motivo}`);

        this.mostrarAvisoRecuperacao('local');

        try {
            this.pararMonitoramentoTemporario();

            await this.executarRecuperacaoLocal();

            this.iniciarMonitoramento();
            this.tentativasRecuperacaoLocal = 0;
            this.mostrarSucessoRecuperacao('local');

        } catch (error) {
            console.log('‚ùå Falha na recupera√ß√£o LOCAL:', error);
            if (this.tentativasRecuperacaoLocal < this.maxTentativas) {
                setTimeout(() => {
                    this.tentarRecuperarCameraLocal(motivo);
                }, 2000);
            }
        }
    }

    // üîß EXECUTAR RECUPERA√á√ÉO DA C√ÇMERA LOCAL
    async executarRecuperacaoLocal() {
        console.log('üîß Executando recupera√ß√£o da c√¢mera LOCAL...');

        if (window.localStream) {
            window.localStream.getTracks().forEach(track => track.stop());
            window.localStream = null;
        }

        await new Promise(resolve => setTimeout(resolve, 1000));

        try {
            const novaStream = await navigator.mediaDevices.getUserMedia({
                video: { 
                    facingMode: 'user',
                    width: { ideal: 1280 },
                    height: { ideal: 720 }
                },
                audio: false
            });

            const localVideo = document.getElementById('localVideo');
            if (localVideo) {
                localVideo.srcObject = novaStream;
            }

            window.localStream = novaStream;
            this.atualizarWebRTC(novaStream);

            console.log('‚úÖ C√¢mera LOCAL recuperada com sucesso!');
            this.estadoCameras.local = 'ativa';
            return true;

        } catch (error) {
            console.log('‚ùå N√£o foi poss√≠vel recuperar c√¢mera LOCAL:', error);
            this.estadoCameras.local = 'erro';
            throw error;
        }
    }

    // üì¢ NOTIFICAR PROBLEMA NA C√ÇMERA REMOTA
    notificarProblemaRemoto(motivo) {
        console.log(`üö® Problema na c√¢mera REMOTA: ${motivo}`);
        
        // üì± MOSTRA INDICADOR VISUAL PARA O USU√ÅRIO
        this.mostrarIndicadorProblemaRemoto();
        
        // üîÑ TENTA REESTABELECER CONEX√ÉO (se aplic√°vel)
        if (motivo.includes('congelada') || motivo.includes('erro')) {
            this.tentarReconexaoRemota();
        }
    }

    // üì± MOSTRAR INDICADOR DE PROBLEMA REMOTO
    mostrarIndicadorProblemaRemoto() {
        const videoWrapper = document.querySelector('.video-wrapper');
        if (videoWrapper) {
            // üé® ADICIONA BORDA VERMELHA PARA INDICAR PROBLEMA
            videoWrapper.style.border = '0.3vw solid #ff4444';
            videoWrapper.style.animation = 'pulse-alert 2s infinite';
            
            // üîÑ RESTAURA QUANDO A C√ÇMERA VOLTAR
            setTimeout(() => {
                if (this.estadoCameras.remota === 'ativa') {
                    videoWrapper.style.border = '0.3vw solid #4CAF50';
                    videoWrapper.style.animation = 'none';
                }
            }, 5000);
        }
    }

    // üîÑ TENTAR RECONEX√ÉO REMOTA
    tentarReconexaoRemota() {
        if (window.rtcCore && typeof window.rtcCore.tentarReconexao === 'function') {
            console.log('üîÑ Tentando reconex√£o remota...');
            window.rtcCore.tentarReconexao();
        }
    }

    // üì° ATUALIZAR WEBRTC COM NOVA STREAM
    atualizarWebRTC(novaStream) {
        if (window.rtcCore && window.rtcCore.peer) {
            const connectionState = window.rtcCore.peer.connectionState;
            
            if (connectionState === 'connected') {
                console.log('üîÑ Atualizando WebRTC com c√¢mera LOCAL recuperada...');
                
                try {
                    window.rtcCore.localStream = novaStream;
                    
                    const newVideoTrack = novaStream.getVideoTracks()[0];
                    const senders = window.rtcCore.peer.getSenders();
                    
                    let videoUpdated = false;
                    for (const sender of senders) {
                        if (sender.track && sender.track.kind === 'video') {
                            sender.replaceTrack(newVideoTrack);
                            videoUpdated = true;
                        }
                    }
                    
                    if (videoUpdated) {
                        console.log('‚úÖ WebRTC atualizado com nova c√¢mera LOCAL');
                    }
                } catch (webrtcError) {
                    console.error('‚ùå Erro ao atualizar WebRTC:', webrtcError);
                }
            }
        }
    }

    // üìä OBTER STATUS DAS C√ÇMERAS
    obterStatusCameras() {
        return {
            local: this.estadoCameras.local,
            remota: this.estadoCameras.remota,
            timestamp: Date.now()
        };
    }

    // üõë PARAR MONITORAMENTO TEMPOR√ÅRIO
    pararMonitoramentoTemporario() {
        if (this.intervaloMonitoramento) {
            clearInterval(this.intervaloMonitoramento);
            this.intervaloMonitoramento = null;
        }
        this.estaMonitorando = false;
    }

    // üì¢ MOSTRAR AVISOS
    mostrarAvisoRecuperacao(tipo) {
        console.log(`üîÑ Recuperando c√¢mera ${tipo.toUpperCase()}...`);
    }

    mostrarSucessoRecuperacao(tipo) {
        console.log(`‚úÖ C√¢mera ${tipo.toUpperCase()} recuperada!`);
    }

    mostrarAvisoFinal(tipo) {
        console.log(`‚ùå C√¢mera ${tipo.toUpperCase()} indispon√≠vel.`);
    }

    // üõë PARAR MONITORAMENTO COMPLETO
    pararMonitoramento() {
        if (this.intervaloMonitoramento) {
            clearInterval(this.intervaloMonitoramento);
            this.intervaloMonitoramento = null;
        }
        this.estaMonitorando = false;
        console.log('üõë Vigia bilateral pausado');
    }

    // üîÑ REINICIAR MONITORAMENTO
    reiniciarMonitoramento() {
        this.pararMonitoramento();
        this.tentativasRecuperacaoLocal = 0;
        this.tentativasRecuperacaoRemoto = 0;
        this.ultimoFrameTimeLocal = Date.now();
        this.ultimoFrameTimeRemoto = Date.now();
        this.estadoCameras.local = 'ativa';
        this.estadoCameras.remota = 'ativa';
        this.iniciarMonitoramento();
    }

    // üßπ LIMPAR RECURSOS
    destruir() {
        this.pararMonitoramento();
        console.log('üßπ Vigia bilateral finalizado');
    }
}

// üåê EXPORTAR PARA OS TR√äS ARQUIVOS USAREM
export { CameraVigilante };
