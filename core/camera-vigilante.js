// core/camera-vigilante.js - VIGILANTE PROATIVO PARA 2 C√ÇMERAS
class CameraVigilante {
    constructor() {
        this.estaMonitorando = false;
        this.intervaloMonitoramento = null;
        this.ultimoFrameTime = null;
        this.tentativasRecuperacao = 0;
        this.maxTentativas = 3;
        this.cameraAtual = 'user'; // Come√ßa com frontal
        this.elementId = 'cameraPreview';
        
        console.log('üëÅÔ∏è Vigia Mobile PROATIVO - 2 C√¢meras (Frontal/Traseira)');
    }

    // ‚úÖ INICIA VIGIL√ÇNCIA PROATIVA
    async iniciarVigilancia() {
        console.log(`üìπ Vigilante PROATIVO: Iniciando vigil√¢ncia (${this.cameraAtual})`);
        
        try {
            // CONFIGURA BOT√ÉO DE ALTERNAR
            this.configurarBotaoAlternar();
            
            // INICIA MONITORAMENTO CONT√çNUO
            this.iniciarMonitoramento();
            
            console.log('‚úÖ Vigilante PROATIVO ativo - monitorando 2 c√¢meras');
            
        } catch (error) {
            console.error('‚ùå Vigilante: Falha na inicializa√ß√£o:', error);
        }
    }

    // ‚úÖ CONFIGURA BOT√ÉO DE ALTERNAR C√ÇMERAS
    configurarBotaoAlternar() {
        const toggleBtn = document.getElementById('toggleCamera');
        if (toggleBtn && !toggleBtn._vigilanteConfigurado) {
            toggleBtn.addEventListener('click', () => {
                this.alternarCamera();
            });
            toggleBtn._vigilanteConfigurado = true;
            console.log('üîÑ Bot√£o de alternar c√¢meras configurado');
        }
    }

    // ‚úÖ ALTERNAR ENTRE FRONTAL E TRASEIRA
    async alternarCamera() {
        console.log('üîÑ Vigilante PROATIVO: Alternando c√¢mera...');
        
        // PARA MONITORAMENTO TEMPORARIAMENTE
        this.pararMonitoramento();
        
        // DETERMINA NOVA C√ÇMERA
        const novaCamera = this.cameraAtual === 'user' ? 'environment' : 'user';
        
        try {
            // ALTERNA PARA NOVA C√ÇMERA
            await this.iniciarCamera(novaCamera);
            
            // REINICIA VIGIL√ÇNCIA
            setTimeout(() => {
                this.iniciarMonitoramento();
                console.log(`‚úÖ Vigilante: Alternado para ${novaCamera} (${novaCamera === 'user' ? 'Frontal' : 'Traseira'})`);
            }, 500);
            
        } catch (error) {
            console.error(`‚ùå Falha ao alternar para ${novaCamera}:`, error);
            
            // TENTA VOLTAR PARA C√ÇMERA ANTERIOR EM CASO DE FALHA
            try {
                await this.iniciarCamera(this.cameraAtual);
                this.iniciarMonitoramento();
                console.log('‚úÖ Voltou para c√¢mera anterior ap√≥s falha');
            } catch (fallbackError) {
                console.error('‚ùå Falha cr√≠tica no fallback:', fallbackError);
            }
        }
    }

    // ‚úÖ INICIA C√ÇMERA ESPEC√çFICA
    async iniciarCamera(tipoCamera) {
        const videoElement = document.getElementById(this.elementId);
        if (!videoElement) {
            throw new Error('Elemento de v√≠deo n√£o encontrado');
        }

        // PARA C√ÇMERA ATUAL SE EXISTIR
        if (videoElement.srcObject) {
            videoElement.srcObject.getTracks().forEach(track => track.stop());
        }

        const stream = await navigator.mediaDevices.getUserMedia({
            video: { 
                facingMode: tipoCamera,
                width: { ideal: 1280 },
                height: { ideal: 720 }
            },
            audio: false
        });

        videoElement.srcObject = stream;
        this.cameraAtual = tipoCamera;
        
        return stream;
    }

    // ‚úÖ MONITORAMENTO PROATIVO CONT√çNUO
    iniciarMonitoramento() {
        if (this.estaMonitorando) return;
        
        this.estaMonitorando = true;
        this.ultimoFrameTime = Date.now();
        this.tentativasRecuperacao = 0;

        // OBSERVA√á√ÉO DE FRAMES
        const videoElement = document.getElementById(this.elementId);
        if (videoElement && !videoElement._vigilanteObserver) {
            const observer = () => {
                this.ultimoFrameTime = Date.now();
            };
            videoElement.addEventListener('timeupdate', observer);
            videoElement._vigilanteObserver = observer;
        }
        
        // VERIFICA√á√ÉO PROATIVA A CADA 8 SEGUNDOS
        this.intervaloMonitoramento = setInterval(() => {
            this.verificarSaudeCamera();
        }, 8000);

        console.log('üëÅÔ∏è Vigilante: Monitoramento proativo ativo');
    }

    // ‚úÖ VERIFICA√á√ÉO PROATIVA - DETECTA PROBLEMAS
    verificarSaudeCamera() {
        if (!this.estaMonitorando) return;

        const tempoSemFrames = Date.now() - this.ultimoFrameTime;
        
        // üö® DETECTA C√ÇMERA CONGELADA (>15s SEM FRAMES)
        if (tempoSemFrames > 15000) {
            console.log('üö® Vigilante PROATIVO: C√¢mera congelada - INICIANDO RECUPERA√á√ÉO!');
            this.tentarRecuperacaoProativa();
            return;
        }

        console.log('‚úÖ Vigilante: C√¢mera saud√°vel');
    }

    // ‚úÖ A√á√ÉO PROATIVA - CONSERTA C√ÇMERA AUTOMATICAMENTE
    async tentarRecuperacaoProativa() {
        if (this.tentativasRecuperacao >= this.maxTentativas) {
            console.log('‚ùå Vigilante: M√°ximo de tentativas - ALTERNANDO C√ÇMERA AUTOMATICAMENTE!');
            
            // COMO √öLTIMO RECURSO, ALTERNA PARA OUTRA C√ÇMERA
            await this.alternarCamera();
            return;
        }

        this.tentativasRecuperacao++;
        console.log(`üîÑ Vigilante PROATIVO: Tentativa ${this.tentativasRecuperacao}/${this.maxTentativas} de recupera√ß√£o`);

        try {
            this.pararMonitoramento();
            await this.recuperacaoProativa();

            // REINICIA VIGIL√ÇNCIA AP√ìS RECUPERA√á√ÉO
            setTimeout(() => {
                this.iniciarMonitoramento();
                console.log('‚úÖ Vigilante PROATIVO: C√¢mera recuperada com sucesso!');
            }, 1000);

        } catch (error) {
            console.log('‚ùå Vigilante: Falha na recupera√ß√£o:', error);
        }
    }

    // ‚úÖ RECUPERA√á√ÉO PROATIVA - PARA E REINICIA C√ÇMERA
    async recuperacaoProativa() {
        console.log('üîß Vigilante PROATIVO: Executando recupera√ß√£o...');

        const videoElement = document.getElementById(this.elementId);
        
        // 1. üõë PARA STREAM ATUAL
        if (videoElement && videoElement.srcObject) {
            videoElement.srcObject.getTracks().forEach(track => track.stop());
        }

        // 2. ‚è≥ AGUARDA ESTABILIZA√á√ÉO
        await new Promise(resolve => setTimeout(resolve, 800));

        // 3. üìπ REINICIA C√ÇMERA (MESMA C√ÇMERA)
        const novaStream = await navigator.mediaDevices.getUserMedia({
            video: { 
                facingMode: this.cameraAtual,
                width: { ideal: 1280 },
                height: { ideal: 720 }
            },
            audio: false
        });

        // 4. üé• ATUALIZA ELEMENTO DE V√çDEO
        if (videoElement) {
            videoElement.srcObject = novaStream;
        }

        console.log('‚úÖ Vigilante: Recupera√ß√£o proativa conclu√≠da');
    }

    // ‚úÖ PARA VIGIL√ÇNCIA
    pararMonitoramento() {
        if (this.intervaloMonitoramento) {
            clearInterval(this.intervaloMonitoramento);
            this.intervaloMonitoramento = null;
        }
        this.estaMonitorando = false;
    }

    // ‚úÖ OBT√âM STATUS DO VIGILANTE
    getStatus() {
        return {
            cameraAtual: this.cameraAtual === 'user' ? 'Frontal' : 'Traseira',
            monitorando: this.estaMonitorando,
            tentativasRecuperacao: this.tentativasRecuperacao,
            ultimoFrame: new Date(this.ultimoFrameTime).toLocaleTimeString()
        };
    }
}

// ‚úÖ EXPORTA√á√ÉO PARA SEUS UI.js
export { CameraVigilante };
