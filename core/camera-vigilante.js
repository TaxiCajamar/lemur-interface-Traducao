// üéØ VIGIA DE C√ÇMERA BILATERAL - CONEX√ÉO PRIORIT√ÅRIA
// üìç Localiza√ß√£o: core/camera-vigilante.js

class CameraVigilante {
    constructor() {
        this.estaMonitorando = false;
        this.intervaloMonitoramento = null;
        this.ultimoFrameTimeLocal = null;
        this.ultimoFrameTimeRemoto = null;
        this.tentativasRecuperacaoLocal = 0;
        this.maxTentativas = 3;
        
        // üîç ESTADO DAS C√ÇMERAS
        this.estadoCameras = {
            local: 'ativa', // 'ativa', 'congelada', 'erro', 'inativa'
            remota: 'ativa' // 'ativa', 'congelada', 'erro', 'inativa' - APENAS INFORMATIVO
        };
        
        console.log('üëÅÔ∏è Vigia de C√¢mera Bilateral inicializado');
    }

    // üéØ INICIAR MONITORAMENTO BILATERAL
    iniciarMonitoramento() {
        if (this.estaMonitorando) {
            console.log('üëÅÔ∏è Vigia j√° est√° monitorando');
            return;
        }

        console.log('üëÅÔ∏è Iniciando monitoramento bilateral das c√¢meras...');
        this.estaMonitorando = true;
        this.ultimoFrameTimeLocal = Date.now();
        this.ultimoFrameTimeRemoto = Date.now();

        // üëÅÔ∏è OBSERVA AMBAS AS C√ÇMERAS
        this.observarCameraLocal();
        this.observarCameraRemota();
        
        // ‚ö° VERIFICA√á√ÉO PERI√ìDICA BILATERAL
        this.intervaloMonitoramento = setInterval(() => {
            this.verificarSaudeCameras();
        }, 5000);

        console.log('‚úÖ Vigia bilateral ativado');
    }

    // üëÅÔ∏è OBSERVAR C√ÇMERA LOCAL
    observarCameraLocal() {
        const localVideo = document.getElementById('localVideo');
        if (!localVideo) {
            console.log('‚ö†Ô∏è Elemento localVideo n√£o encontrado');
            this.estadoCameras.local = 'inativa';
            return;
        }

        localVideo.addEventListener('timeupdate', () => {
            this.ultimoFrameTimeLocal = Date.now();
            this.estadoCameras.local = 'ativa';
        });

        localVideo.addEventListener('error', (error) => {
            console.log('‚ùå Erro na c√¢mera local:', error);
            this.estadoCameras.local = 'erro';
            this.tentarRecuperarCameraLocal('erro_no_video');
        });

        console.log('üëÄ Vigia observando c√¢mera local');
    }

    // üëÅÔ∏è OBSERVAR C√ÇMERA REMOTA
    observarCameraRemota() {
        const remoteVideo = document.getElementById('remoteVideo');
        if (!remoteVideo) {
            console.log('‚ö†Ô∏è Elemento remoteVideo n√£o encontrado');
            this.estadoCameras.remota = 'inativa';
            return;
        }

        remoteVideo.addEventListener('timeupdate', () => {
            this.ultimoFrameTimeRemoto = Date.now();
            this.estadoCameras.remota = 'ativa';
        });

        remoteVideo.addEventListener('error', (error) => {
            console.log('‚ùå Erro na recep√ß√£o da c√¢mera remota:', error);
            this.estadoCameras.remota = 'erro';
            // ‚ö†Ô∏è APENAS LOG - NUNCA TENTA RECUPERAR
            console.log('‚ö†Ô∏è Problema na recep√ß√£o remota - conex√£o WebRTC mantida');
        });

        console.log('üëÄ Vigia observando c√¢mera remota (apenas monitoramento)');
    }

    // ‚ö° VERIFICAR SA√öDE DE AMBAS AS C√ÇMERAS
    verificarSaudeCameras() {
        if (!this.estaMonitorando) return;

        const agora = Date.now();
        
        // üé• VERIFICA C√ÇMERA LOCAL
        const tempoSemFramesLocal = agora - this.ultimoFrameTimeLocal;
        if (tempoSemFramesLocal > 10000 && this.estadoCameras.local === 'ativa') {
            console.log('üö® C√¢mera LOCAL congelada - sem frames h√°', tempoSemFramesLocal + 'ms');
            this.estadoCameras.local = 'congelada';
            this.tentarRecuperarCameraLocal('congelada');
        }

        // üì° VERIFICA C√ÇMERA REMOTA (APENAS DETEC√á√ÉO)
        const tempoSemFramesRemoto = agora - this.ultimoFrameTimeRemoto;
        if (tempoSemFramesRemoto > 15000 && this.estadoCameras.remota === 'ativa') {
            console.log('üö® C√¢mera REMOTA congelada - sem frames h√°', tempoSemFramesRemoto + 'ms');
            this.estadoCameras.remota = 'congelada';
            // ‚ö†Ô∏è APENAS LOG - NUNCA INTERFERE
            console.log('‚ö†Ô∏è C√¢mera remota congelada - mantendo conex√£o WebRTC ativa');
        }

        // ‚úÖ VERIFICA STREAMS ATIVAS
        this.verificarStreamsAtivas();

        console.log(`üìä Status: Local=${this.estadoCameras.local}, Remota=${this.estadoCameras.remota}`);
    }

    // üîÑ VERIFICAR STREAMS ATIVAS
    verificarStreamsAtivas() {
        // üé• VERIFICA STREAM LOCAL
        if (window.localStream) {
            const videoTrackLocal = window.localStream.getVideoTracks()[0];
            if (videoTrackLocal) {
                if (videoTrackLocal.readyState === 'ended') {
                    console.log('üö® Track de v√≠deo LOCAL terminou');
                    this.estadoCameras.local = 'erro';
                    this.tentarRecuperarCameraLocal('track_terminada');
                }
            } else {
                console.log('üö® Nenhuma track de v√≠deo LOCAL encontrada');
                this.estadoCameras.local = 'inativa';
            }
        }

        // üì° VERIFICA STREAM REMOTA (APENAS DETEC√á√ÉO)
        if (window.remoteStream) {
            const videoTrackRemoto = window.remoteStream.getVideoTracks()[0];
            if (videoTrackRemoto && videoTrackRemoto.readyState === 'ended') {
                console.log('üö® Track de v√≠deo REMOTA terminou');
                this.estadoCameras.remota = 'erro';
                // ‚ö†Ô∏è APENAS LOG - NUNCA TENTA RECUPERAR
                console.log('‚ö†Ô∏è Stream remota terminou - data channel continua funcionando');
            }
        }
    }

    // üîÑ TENTAR RECUPERAR C√ÇMERA LOCAL
    async tentarRecuperarCameraLocal(motivo) {
        if (this.tentativasRecuperacaoLocal >= this.maxTentativas) {
            console.log('‚ùå M√°ximo de tentativas de recupera√ß√£o LOCAL atingido - continuando sem v√≠deo local');
            return;
        }

        this.tentativasRecuperacaoLocal++;
        console.log(`üîÑ Tentativa LOCAL ${this.tentativasRecuperacaoLocal}/${this.maxTentativas} - Motivo: ${motivo}`);

        try {
            this.pararMonitoramentoTemporario();

            await this.executarRecuperacaoLocal();

            this.iniciarMonitoramento();
            this.tentativasRecuperacaoLocal = 0;
            console.log(`‚úÖ C√¢mera LOCAL recuperada!`);

        } catch (error) {
            console.log('‚ùå Falha na recupera√ß√£o LOCAL:', error);
            console.log('üü° Continuando sem c√¢mera local - conex√£o WebRTC mantida');
            
            // üîÑ REINICIA MONITORAMENTO MESMO COM FALHA
            this.iniciarMonitoramento();
            
            if (this.tentativasRecuperacaoLocal < this.maxTentativas) {
                setTimeout(() => {
                    this.tentarRecuperarCameraLocal(motivo);
                }, 2000);
            }
        }
    }

    // üîß EXECUTAR RECUPERA√á√ÉO DA C√ÇMERA LOCAL
    async executarRecuperacaoLocal() {
        console.log('üîß Executando recupera√ß√£o da c√¢mera LOCAL...');

        if (window.localStream) {
            window.localStream.getTracks().forEach(track => track.stop());
            window.localStream = null;
        }

        await new Promise(resolve => setTimeout(resolve, 1000));

        try {
            const novaStream = await navigator.mediaDevices.getUserMedia({
                video: { 
                    facingMode: 'user',
                    width: { ideal: 1280 },
                    height: { ideal: 720 }
                },
                audio: false
            });

            const localVideo = document.getElementById('localVideo');
            if (localVideo) {
                localVideo.srcObject = novaStream;
            }

            window.localStream = novaStream;
            this.atualizarWebRTC(novaStream);

            console.log('‚úÖ C√¢mera LOCAL recuperada com sucesso!');
            this.estadoCameras.local = 'ativa';
            return true;

        } catch (error) {
            console.log('‚ùå N√£o foi poss√≠vel recuperar c√¢mera LOCAL:', error);
            this.estadoCameras.local = 'erro';
            throw error;
        }
    }

    // üì° ATUALIZAR WEBRTC COM NOVA STREAM
    atualizarWebRTC(novaStream) {
        if (window.rtcCore && window.rtcCore.peer) {
            const connectionState = window.rtcCore.peer.connectionState;
            
            if (connectionState === 'connected') {
                console.log('üîÑ Atualizando WebRTC com c√¢mera LOCAL recuperada...');
                
                try {
                    window.rtcCore.localStream = novaStream;
                    
                    const newVideoTrack = novaStream.getVideoTracks()[0];
                    const senders = window.rtcCore.peer.getSenders();
                    
                    let videoUpdated = false;
                    for (const sender of senders) {
                        if (sender.track && sender.track.kind === 'video') {
                            sender.replaceTrack(newVideoTrack);
                            videoUpdated = true;
                        }
                    }
                    
                    if (videoUpdated) {
                        console.log('‚úÖ WebRTC atualizado com nova c√¢mera LOCAL');
                    }
                } catch (webrtcError) {
                    console.error('‚ùå Erro ao atualizar WebRTC:', webrtcError);
                    // ‚ö†Ô∏è N√ÉO LAN√áA ERRO - CONEX√ÉO CONTINUA
                }
            }
        }
    }

    // üìä OBTER STATUS DAS C√ÇMERAS
    obterStatusCameras() {
        return {
            local: this.estadoCameras.local,
            remota: this.estadoCameras.remota,
            timestamp: Date.now()
        };
    }

    // üõë PARAR MONITORAMENTO TEMPOR√ÅRIO
    pararMonitoramentoTemporario() {
        if (this.intervaloMonitoramento) {
            clearInterval(this.intervaloMonitoramento);
            this.intervaloMonitoramento = null;
        }
        this.estaMonitorando = false;
    }

    // üõë PARAR MONITORAMENTO COMPLETO
    pararMonitoramento() {
        if (this.intervaloMonitoramento) {
            clearInterval(this.intervaloMonitoramento);
            this.intervaloMonitoramento = null;
        }
        this.estaMonitorando = false;
        console.log('üõë Vigia bilateral pausado');
    }

    // üîÑ REINICIAR MONITORAMENTO
    reiniciarMonitoramento() {
        this.pararMonitoramento();
        this.tentativasRecuperacaoLocal = 0;
        this.ultimoFrameTimeLocal = Date.now();
        this.ultimoFrameTimeRemoto = Date.now();
        this.estadoCameras.local = 'ativa';
        this.estadoCameras.remota = 'ativa';
        this.iniciarMonitoramento();
    }

    // üßπ LIMPAR RECURSOS
    destruir() {
        this.pararMonitoramento();
        console.log('üßπ Vigia bilateral finalizado');
    }
}

// üåê EXPORTAR PARA OS TR√äNS ARQUIVOS USAREM
export { CameraVigilante };
