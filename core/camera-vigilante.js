
// üéØ VIGIA DE C√ÇMERA UNIVERSAL - PARA RECEIVER, CALLER E NOTIFICADOR
// üìç Localiza√ß√£o: core/camera-vigilante.js (NA SUA ESTRUTURA ATUAL)

class CameraVigilante {
    constructor() {
        this.estaMonitorando = false;
        this.intervaloMonitoramento = null;
        this.ultimoFrameTime = null;
        this.tentativasRecuperacao = 0;
        this.maxTentativas = 3;
        
        console.log('üëÅÔ∏è Vigia de C√¢mera inicializado');
    }

    // üéØ INICIAR MONITORAMENTO DA C√ÇMERA
    iniciarMonitoramento() {
        if (this.estaMonitorando) {
            console.log('üëÅÔ∏è Vigia j√° est√° monitorando');
            return;
        }

        console.log('üëÅÔ∏è Iniciando monitoramento da c√¢mera...');
        this.estaMonitorando = true;
        this.ultimoFrameTime = Date.now();

        // üëÅÔ∏è OBSERVA MUDAN√áAS NO V√çDEO
        this.observarVideo();
        
        // ‚ö° VERIFICA√á√ÉO PERI√ìDICA
        this.intervaloMonitoramento = setInterval(() => {
            this.verificarSaudeCamera();
        }, 5000); // A cada 5 segundos

        console.log('‚úÖ Vigia de c√¢mera ativado');
    }

    // üëÅÔ∏è OBSERVAR MUDAN√áAS NO ELEMENTO DE V√çDEO
    observarVideo() {
        const localVideo = document.getElementById('localVideo');
        if (!localVideo) {
            console.log('‚ö†Ô∏è Elemento localVideo n√£o encontrado');
            return;
        }

        // üé• DETECTA QUANDO FRAMES EST√ÉO SENDO ATUALIZADOS
        localVideo.addEventListener('timeupdate', () => {
            this.ultimoFrameTime = Date.now();
        });

        // üîç DETECTA ERROS NO V√çDEO
        localVideo.addEventListener('error', (error) => {
            console.log('‚ùå Erro detectado no elemento de v√≠deo:', error);
            this.tentarRecuperarCamera('erro_no_video');
        });

        console.log('üëÄ Vigia observando elemento de v√≠deo');
    }

    // ‚ö° VERIFICAR SA√öDE DA C√ÇMERA
    verificarSaudeCamera() {
        if (!this.estaMonitorando) return;

        const agora = Date.now();
        const tempoSemFrames = agora - this.ultimoFrameTime;
        
        // üö® DETECTA C√ÇMERA CONGELADA (mais de 10 segundos sem frames)
        if (tempoSemFrames > 10000) {
            console.log('üö® C√¢mera possivelmente congelada - sem frames h√°', tempoSemFrames + 'ms');
            this.tentarRecuperarCamera('congelada');
            return;
        }

        // ‚úÖ VERIFICA SE A STREAM AINDA EXISTE E EST√Å ATIVA
        if (window.localStream) {
            const videoTrack = window.localStream.getVideoTracks()[0];
            if (videoTrack) {
                if (videoTrack.readyState === 'ended') {
                    console.log('üö® Track de v√≠deo terminou');
                    this.tentarRecuperarCamera('track_terminada');
                }
            } else {
                console.log('üö® Nenhuma track de v√≠deo encontrada');
                this.tentarRecuperarCamera('sem_track');
            }
        } else {
            console.log('‚ÑπÔ∏è Nenhuma stream local ativa');
        }

        console.log('‚úÖ C√¢mera saud√°vel - frames atualizando normalmente');
    }

    // üîÑ TENTAR RECUPERAR C√ÇMERA AUTOMATICAMENTE
    async tentarRecuperarCamera(motivo) {
        if (this.tentativasRecuperacao >= this.maxTentativas) {
            console.log('‚ùå M√°ximo de tentativas de recupera√ß√£o atingido');
            this.mostrarAvisoFinal();
            return;
        }

        this.tentativasRecuperacao++;
        console.log(`üîÑ Tentativa ${this.tentativasRecuperacao}/${this.maxTentativas} - Motivo: ${motivo}`);

        // üì¢ AVISA O USU√ÅRIO
        this.mostrarAvisoRecuperacao();

        try {
            // üõë PARA MONITORAMENTO DURANTE A RECUPERA√á√ÉO
            this.pararMonitoramento();

            // üîß TENTA RECUPERAR
            await this.executarRecuperacao();

            // ‚úÖ REINICIA MONITORAMENTO SE RECUPEROU
            this.iniciarMonitoramento();
            this.tentativasRecuperacao = 0; // Reseta contador
            this.mostrarSucessoRecuperacao();

        } catch (error) {
            console.log('‚ùå Falha na recupera√ß√£o:', error);
            // ‚è≥ AGUARDA E TENTA NOVAMENTE (SE AINDA TIVER TENTATIVAS)
            if (this.tentativasRecuperacao < this.maxTentativas) {
                setTimeout(() => {
                    this.tentarRecuperarCamera(motivo);
                }, 2000);
            }
        }
    }

    // üîß EXECUTAR PROCESSO DE RECUPERA√á√ÉO
    async executarRecuperacao() {
        console.log('üîß Executando recupera√ß√£o de c√¢mera...');

        // 1. üõë PARA STREAM ATUAL
        if (window.localStream) {
            window.localStream.getTracks().forEach(track => track.stop());
            window.localStream = null;
        }

        // 2. ‚è≥ AGUARDA LIBERA√á√ÉO
        await new Promise(resolve => setTimeout(resolve, 1000));

        // 3. üìπ TENTA NOVA C√ÇMERA (FRONTAL - MAIS CONFI√ÅVEL)
        try {
            const novaStream = await navigator.mediaDevices.getUserMedia({
                video: { 
                    facingMode: 'user', // ‚úÖ Sempre frontal na recupera√ß√£o
                    width: { ideal: 1280 },
                    height: { ideal: 720 }
                },
                audio: false
            });

            // 4. üé• ATUALIZA V√çDEO LOCAL
            const localVideo = document.getElementById('localVideo');
            if (localVideo) {
                localVideo.srcObject = novaStream;
            }

            // 5. üîÑ ATUALIZA STREAM GLOBAL
            window.localStream = novaStream;

            // 6. üì° ATUALIZA WEBRTC (SE CONECTADO)
            this.atualizarWebRTC(novaStream);

            console.log('‚úÖ C√¢mera recuperada com sucesso!');
            return true;

        } catch (error) {
            console.log('‚ùå N√£o foi poss√≠vel recuperar c√¢mera:', error);
            throw error;
        }
    }

    // üì° ATUALIZAR WEBRTC COM NOVA STREAM
    atualizarWebRTC(novaStream) {
        if (window.rtcCore && window.rtcCore.peer) {
            const connectionState = window.rtcCore.peer.connectionState;
            
            if (connectionState === 'connected') {
                console.log('üîÑ Atualizando WebRTC com c√¢mera recuperada...');
                
                try {
                    window.rtcCore.localStream = novaStream;
                    
                    const newVideoTrack = novaStream.getVideoTracks()[0];
                    const senders = window.rtcCore.peer.getSenders();
                    
                    let videoUpdated = false;
                    for (const sender of senders) {
                        if (sender.track && sender.track.kind === 'video') {
                            sender.replaceTrack(newVideoTrack);
                            videoUpdated = true;
                        }
                    }
                    
                    if (videoUpdated) {
                        console.log('‚úÖ WebRTC atualizado com nova c√¢mera');
                    }
                } catch (webrtcError) {
                    console.error('‚ùå Erro ao atualizar WebRTC:', webrtcError);
                }
            }
        }
    }

    // üì¢ MOSTRAR AVISOS PARA O USU√ÅRIO
    mostrarAvisoRecuperacao() {
        // ‚úÖ MENSAGEM NO CONSOLE - SEM MODIFICAR SUA ESTRUTURA
        console.log('üîÑ Recuperando c√¢mera...');
    }

    mostrarSucessoRecuperacao() {
        console.log('‚úÖ C√¢mera recuperada!');
    }

    mostrarAvisoFinal() {
        console.log('‚ùå C√¢mera indispon√≠vel. Continuando sem v√≠deo.');
    }

    // üõë PARAR MONITORAMENTO
    pararMonitoramento() {
        if (this.intervaloMonitoramento) {
            clearInterval(this.intervaloMonitoramento);
            this.intervaloMonitoramento = null;
        }
        this.estaMonitorando = false;
        console.log('üõë Vigia de c√¢mera pausado');
    }

    // üîÑ REINICIAR MONITORAMENTO (AP√ìS TROCA DE C√ÇMERA)
    reiniciarMonitoramento() {
        this.pararMonitoramento();
        this.tentativasRecuperacao = 0;
        this.ultimoFrameTime = Date.now();
        this.iniciarMonitoramento();
    }

    // üßπ LIMPAR RECURSOS
    destruir() {
        this.pararMonitoramento();
        console.log('üßπ Vigia de c√¢mera finalizado');
    }
}

// üåê EXPORTAR PARA OS TR√äS ARQUIVOS USAREM
export { CameraVigilante };
